% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/req-retries.R
\name{req_retry}
\alias{req_retry}
\title{Control how and when a request will retry}
\usage{
req_retry(
  req,
  max_tries = NULL,
  max_seconds = NULL,
  is_transient = NULL,
  backoff = NULL,
  after = NULL
)
}
\arguments{
\item{req}{A \link{req}uest.}

\item{max_tries, max_seconds}{Cap the maximum number of attempts with
\code{max_tries} or the total elapsed time from the first request with
\code{max_seconds}.}

\item{is_transient}{A predicate function that takes a single argument
(the response) and returns \code{TRUE} or \code{FALSE} specifying whether or not
the response represents a transient error (i.e. it should be retried
after \code{backoff} seconds).}

\item{backoff}{A callback function that takes a single argument (the attempt
number) and returns a single number giving the number of seconds to wait.}

\item{after}{A callback function that takes a single argument (the
response) and returns either a number of seconds to wait or \code{NULL} (to
indicate precise timing is not available and to instead use \code{backoff}).}
}
\description{
There are two main cases in which a request might be retried:
\itemize{
\item The error occurs at the network layer and either the HTTP request or
the response fails to complete successfully (e.g. because your wifi
is down).
\item The error is "transient", i.e. it's an HTTP error that is likely to
be resolve by waiting. By default httr2 will treat 429 and 503 statuses
as transient. You can treat other responses as transient errors with
the \code{is_transient} argument.
}

httr2 uses two policies to determine how long to wait between requests:
\itemize{
\item If an HTTP error contains the \code{Retry-After} header, httr2 will either
wait until the specified time or wait the specified number of seconds.
You can consult a different header by using the \code{retry_after} argument.
\item Otherwise, httr2 will use "truncated exponential backoff with full
jitter", to wait a random amount of time between one second and
\code{2 ^ tries} seconds, capped to at most 60 seconds. In other words, it
waits \code{runif(1, 2)} seconds after the first failure, then \code{runif(1, 4)}
after the second. You can use a different algorithm by using the \code{backoff}
argument.
}

You can control the total number of requests by setting \code{max_tries},
\code{max_seconds}, or both.
}
\examples{
# google APIs assume that a 500 is also a transient error
req("http://google.com") \%>\%
  req_retry(is_transient = ~ resp_status_code(.x) \%in\% c(429, 500, 503))

# use a constant 10s delay after every failure
req("http://example.com") \%>\%
  req_retry(backoff = ~ 10)
}
