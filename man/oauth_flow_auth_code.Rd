% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oauth-flow-auth-code.R
\name{oauth_flow_auth_code}
\alias{oauth_flow_auth_code}
\alias{oauth_flow_auth_code_url}
\alias{oauth_flow_auth_code_listen}
\alias{oauth_flow_auth_code_parse}
\alias{oauth_flow_auth_pkce}
\title{OAuth flow: authorization code}
\usage{
oauth_flow_auth_code(
  app,
  scope = NULL,
  pkce = TRUE,
  auth_params = list(),
  token_params = list(),
  host_name = "localhost",
  host_ip = "127.0.0.1",
  port = httpuv::randomPort()
)

oauth_flow_auth_code_url(
  app,
  redirect_uri = NULL,
  scope = NULL,
  state = NULL,
  auth_params = list()
)

oauth_flow_auth_code_listen(host_ip = "127.0.0.1", port = 1410)

oauth_flow_auth_code_parse(query, state)

oauth_flow_auth_pkce()
}
\arguments{
\item{app}{An \code{\link[=oauth_app]{oauth_app()}}.}

\item{scope}{Scopes to be requested from the resource owner.}

\item{pkce}{Use "Proof Key for Code Exchange"? This adds an extra layer of
security and should always be used if supported by the server.}

\item{auth_params}{List containing additional parameters passed to \code{oauth_flow_auth_code_url()}}

\item{token_params}{List containing additional parameters passed to \code{oauth_flow_access_token()}.}

\item{host_name}{Host name used to generate \code{redirect_uri}}

\item{host_ip}{IP address web server will be bound to.}

\item{port}{Port to bind web server to. By default, this uses a random port.
You may need to set it to a fixed port if the API requires that the
\code{redirect_uri} specified in the client exactly matches the \code{redirect_uri}
generated by this function.}

\item{redirect_uri}{URL to which user should be redirected.}

\item{state}{Random state generated by \code{oauth_flow_auth_code()}. Used to
verify that we're working with an authentication request that we created.
(This is an unlikely threat for R packages since the webserver that
listens for authorization responses is transient.)}

\item{query}{List of query parameters returned by \code{oauth_flow_auth_code_listen()}.}
}
\description{
These functions implement the OAuth authorization code flow, as defined
by \href{https://datatracker.ietf.org/doc/html/rfc6749#section-4.1}{rfc6749},
Section 4.1. This is the most commonly used OAuth flow where the user is
opens a page in their browser, approves the access, and then returns to R.

\code{oauth_flow_auth_code()} is a high-level wrapper that should
work with APIs that adhere relatively closely to the spec. The remaining
low-level functions can be used to assemble a custom flow for APIs that are
further from the spec:
\itemize{
\item \code{oauth_flow_auth_code_url()} generates the url where the user is sent.
\item \code{oauth_flow_auth_code_listen()} starts an webserver that listens for
the response from the resource server.
\item \code{oauth_flow_auth_code_parse()} parses the query parameters returned from
the server redirect, verifying that the \code{state} is correct, and returning
the authorisation code.
\item \code{ouath_flow_auth_pkce()} generates code verifier, method, and challenge
components as needed for PKCE, as defined in
\href{https://datatracker.ietf.org/doc/html/rfc7636}{rfc7636}.
}
\subsection{Security considerations}{

The authorization code flow is used for both web applications and native
applications (which are equivalent to R packages).
\href{https://datatracker.ietf.org/doc/html/rfc8252}{rfc8252} spells out
important considerations for native apps. Most importantly there's no way
for native apps to keep secrets from their users. This means that the
server should either not require a \code{client_secret} (i.e. a public client
not an confidential client) or ensure that possession of the \code{client_secret}
doesn't bestow any meaningful rights.

Only modern APIs from the bigger players (Azure, Google, etc) explicitly
native apps. However, in most cases, even for older APIs, possessing the
\code{client_secret} gives you no ability to do anything harmful, so our
general principle is that it's fine to include it in an R package, as long
as it's mildly obfuscated to protect it from credential scraping. There's
no incentive to steal your client credentials if it takes less time to
create a new client than find your client secret.
}
}
\concept{OAuth flows}
