[{"path":"https://httr2.r-lib.org/LICENSE.html","id":"mit-license","dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 httr2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://httr2.r-lib.org/articles/httr2.html","id":"create-a-request","dir":"Articles","previous_headings":"","what":"Create a request","title":"httr2","text":"httr2, start creating request. ’re familiar httr, big change: httr submit request, immediately receiving response. explicit request object makes easier build complex request piece piece works well pipe. Every request starts URL: can see exactly request send server dry run: first line request contains three important pieces information: HTTP method, verb tells server want . ’s GET, common verb, indicating want get resource. verbs include POST, create new resource, PUT, replace existing resource, DELETE, delete resource. path, URL stripped details server already knows, .e. protocol (http https), host (httpbin.org), port (used ). version HTTP protocol. unimportant purposes ’s handled lower level. following lines specify HTTP headers, series name-value pairs separated :. headers request automatically added httr2, can override add req_headers(): Header names case-insensitive, servers ignore headers don’t understand. headers finish blank line followed body. requests (like GET requests) don’t body, let’s add one see happens. req_body_*() functions provide variety ways add data body. ’ll use req_body_json() add data encoded JSON: ’s changed? method changed GET POST. POST standard method sending data website, automatically used whenever add body. Use req_method() different method. two new headers: Content-Type Content-Length. tell server interpret body — ’s encoded JSON 15 bytes long. body, consisting JSON. Different servers want data encoded differently httr2 provides selection common formats. example, req_body_form() uses encoding used submit form web browser: req_body_multipart() uses multipart encoding particularly important need send larger amounts data complete files: need send data encoded different form, can use req_body_raw() add data body set Content-Type header.","code":"req <- request(\"https://httpbin.org/get\") req #> <httr2_request> #> GET https://httpbin.org/get #> Body: empty req %>% req_dry_run() #> GET /get HTTP/1.1 #> Host: httpbin.org #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br req %>%   req_headers(     Name = \"Hadley\",      `Shoe-Size` = \"11\",      Accept = \"application/json\"   ) %>%    req_dry_run() #> GET /get HTTP/1.1 #> Host: httpbin.org #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept-Encoding: deflate, gzip, br #> Name: Hadley #> Shoe-Size: 11 #> Accept: application/json req %>%   req_body_json(list(x = 1, y = \"a\")) %>%    req_dry_run() #> POST /get HTTP/1.1 #> Host: httpbin.org #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br #> Content-Type: application/json #> Content-Length: 15 #>  #> {\"x\":1,\"y\":\"a\"} req %>%   req_body_form(list(x = \"1\", y = \"a\")) %>%    req_dry_run() #> POST /get HTTP/1.1 #> Host: httpbin.org #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br #> Content-Type: application/x-www-form-urlencoded #> Content-Length: 7 #>  #> x=1&y=a req %>%   req_body_multipart(list(x = \"1\", y = \"a\")) %>%    req_dry_run() #> POST /get HTTP/1.1 #> Host: httpbin.org #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br #> Content-Length: 228 #> Content-Type: multipart/form-data; boundary=------------------------d4865c3be4f4b9ef #>  #> --------------------------d4865c3be4f4b9ef #> Content-Disposition: form-data; name=\"x\" #>  #> 1 #> --------------------------d4865c3be4f4b9ef #> Content-Disposition: form-data; name=\"y\" #>  #> a #> --------------------------d4865c3be4f4b9ef--"},{"path":"https://httr2.r-lib.org/articles/httr2.html","id":"perform-a-request-and-fetch-the-response","dir":"Articles","previous_headings":"","what":"Perform a request and fetch the response","title":"httr2","text":"actually perform request fetch response back server, call req_perform(): can see simulation httr2 actually received resp_raw(): HTTP response similar structure HTTP request. first line gives version HTTP used, status code ’s optionally followed short description. headers, followed blank line, followed body. majority responses body, unlike requests. can extract data response using resp_() functions: resp_status() returns status code resp_status_desc() returns description: can extract headers resp_headers() specific header resp_header(): Headers case insensitive: can extract body various forms using resp_body_*() family functions. Since response returns JSON can use resp_body_json(): Responses status codes 4xx 5xx HTTP errors. httr2 automatically turns R errors: another important difference httr, required explicitly call httr::stop_for_status() turn HTTP errors R errors. can revert httr behaviour req_error(req, is_error = ~ FALSE).","code":"req <- request(\"https://httpbin.org/json\") resp <- req %>% req_perform() resp #> <httr2_response> #> GET https://httpbin.org/json #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (429 bytes) resp %>% resp_raw() #> HTTP/1.1 200 OK #> date: Thu, 23 Sep 2021 12:28:22 GMT #> content-type: application/json #> content-length: 429 #> server: gunicorn/19.9.0 #> access-control-allow-origin: * #> access-control-allow-credentials: true #>  #> { #>   \"slideshow\": { #>     \"author\": \"Yours Truly\",  #>     \"date\": \"date of publication\",  #>     \"slides\": [ #>       { #>         \"title\": \"Wake up to WonderWidgets!\",  #>         \"type\": \"all\" #>       },  #>       { #>         \"items\": [ #>           \"Why <em>WonderWidgets<\/em> are great\",  #>           \"Who <em>buys<\/em> WonderWidgets\" #>         ],  #>         \"title\": \"Overview\",  #>         \"type\": \"all\" #>       } #>     ],  #>     \"title\": \"Sample Slide Show\" #>   } #> } resp %>% resp_status() #> [1] 200 resp %>% resp_status_desc() #> [1] \"OK\" resp %>% resp_headers() #> <httr2_headers> #> date: Thu, 23 Sep 2021 12:28:22 GMT #> content-type: application/json #> content-length: 429 #> server: gunicorn/19.9.0 #> access-control-allow-origin: * #> access-control-allow-credentials: true resp %>% resp_header(\"Content-Length\") #> [1] \"429\" resp %>% resp_header(\"ConTEnT-LeNgTH\") #> [1] \"429\" resp %>% resp_body_json() %>% str() #> List of 1 #>  $ slideshow:List of 4 #>   ..$ author: chr \"Yours Truly\" #>   ..$ date  : chr \"date of publication\" #>   ..$ slides:List of 2 #>   .. ..$ :List of 2 #>   .. .. ..$ title: chr \"Wake up to WonderWidgets!\" #>   .. .. ..$ type : chr \"all\" #>   .. ..$ :List of 3 #>   .. .. ..$ items:List of 2 #>   .. .. .. ..$ : chr \"Why <em>WonderWidgets<\/em> are great\" #>   .. .. .. ..$ : chr \"Who <em>buys<\/em> WonderWidgets\" #>   .. .. ..$ title: chr \"Overview\" #>   .. .. ..$ type : chr \"all\" #>   ..$ title : chr \"Sample Slide Show\" request(\"https://httpbin.org/status/404\") %>% req_perform() #> Error: HTTP 404 Not Found. request(\"https://httpbin.org/status/500\") %>% req_perform() #> Error: HTTP 500 Internal Server Error."},{"path":"https://httr2.r-lib.org/articles/httr2.html","id":"control-the-request-process","dir":"Articles","previous_headings":"","what":"Control the request process","title":"httr2","text":"number req_ functions don’t directly affect HTTP request instead control overall process submitting request handling response. include: req_cache() sets cache repeated requests return results, can avoid trip server. req_throttle() automatically add small delay request can avoid hammering server many requests. req_retry() sets retry strategy request either fails get transient HTTP error, ’ll automatically retry short delay. details see documentation, well examples usage real APIs vignette(\"wrapping-apis.Rmd\").","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"faker-api","dir":"Articles","previous_headings":"","what":"Faker API","title":"Wrapping APIs","text":"’ll start simple API, faker API, provides collection techniques generating fake data. start writing sort functions might put package, ’ll perform request just see basics work:","code":"# We start by creating a request that uses the base API url req <- request(\"https://fakerapi.it/api/v1\") resp <- req %>%    # Then we add on the images path   req_url_path_append(\"images\") %>%    # Add query parameters _width and _quantity   req_url_query(`_width` = 380, `_quantity` = 1) %>%    req_perform()  # The result comes back as JSON resp %>% resp_body_json() %>% str() #> List of 4 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 3 #>   .. ..$ title      : chr \"Sit unde officiis ducimus.\" #>   .. ..$ description: chr \"Omnis labore voluptas qui. Explicabo recusandae sunt sint ab dolores atque sunt. Sed dolores inventore ut corpo\"| __truncated__ #>   .. ..$ url        : chr \"http://placeimg.com/380/480/any\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"errors","dir":"Articles","previous_headings":"Faker API","what":"Errors","title":"Wrapping APIs","text":"’s always worth little early experimentation see get useful information errors. httr2 defaults get way , retrieve unsuccessful HTTP response, automatically get error prevents inspecting body: However, can access last response (successful ) last_response(): doesn’t look like ’s anything useful . Sometimes useful info returned headers, let’s check: doesn’t look like ’re getting useful information, can leave req_error() default . ’ll another go later API provide details.","code":"req %>%    req_url_path_append(\"invalid\") %>%    req_perform() #> Error: HTTP 404 Not Found. resp <- last_response() resp %>% resp_body_json() #> $status #> [1] \"Not found\" #>  #> $code #> [1] 404 #>  #> $total #> [1] 0 resp %>% resp_headers() #> <httr2_headers> #> Server: nginx #> Content-Type: application/json #> Transfer-Encoding: chunked #> Connection: keep-alive #> Vary: Accept-Encoding #> X-Powered-By: PHP/7.3.16 #> Cache-Control: no-cache, private #> Date: Thu, 23 Sep 2021 12:28:27 GMT #> Access-Control-Allow-Origin: * #> Access-Control-Allow-Methods: GET #> Access-Control-Allow-Credentials: true #> Access-Control-Max-Age: 86400 #> Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With #> Content-Encoding: gzip"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"user-agent","dir":"Articles","previous_headings":"Faker API","what":"User agent","title":"Wrapping APIs","text":"’re wrapping code package, ’s considered polite set user agent, , app accidentally something horribly wrong, developers website can figure reach . can req_user_agent() function:","code":"req %>%   req_user_agent(\"my_package_name (http://my.package.web.site)\") %>%    req_dry_run() #> GET /api/v1 HTTP/1.1 #> Host: fakerapi.it #> User-Agent: my_package_name (http://my.package.web.site) #> Accept: */* #> Accept-Encoding: deflate, gzip, br"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"core-request-function","dir":"Articles","previous_headings":"Faker API","what":"Core request function","title":"Wrapping APIs","text":"’ve made successful requests, ’s worth seeing can figure general pattern can wrap function become core package. faker, spent little documentation noting commonalities: Every URL form https://fakerapi./api/v1/{resource}, data passed resource query parameters. parameters start _. Every resource three common query parameters: _locale, _quantity, _seed. endpoints return JSON data. lead construct following function: ’ve made important choices : ’ve decided supply default values quantity locale parameters. makes function easier demo vignette. ’ve used default NULL seed argument. req_url_query() automatically drop NULL arguments means default value sent API, read function definition can still see seed accepted. automatically prefix query parameters _ argument names starting _ hard type R. function generates request, performs , extracts body response. works well simple cases, complex APIs might want return request object can modified performed. also used one cool trick: req_url_query() uses dynamic dots, can use !!! convert (e.g.) req_url_query(req, !!!list(`_quantity` = 1, `_locale` = \"en_US\")) req_url_query(req, `_quantity` = 1, `_locale` = \"en_US\").","code":"faker <- function(resource, ..., quantity = 1, locale = \"en_US\", seed = NULL) {   params <- list(     ...,     quantity = quantity,     locale = locale,     seed = seed   )   names(params) <- paste0(\"_\", names(params))      request(\"https://fakerapi.it/api/v1\") %>%      req_url_path_append(resource) %>%      req_url_query(!!!params) %>%      req_user_agent(\"my_package_name (http://my.package.web.site)\") %>%      req_perform() %>%      resp_body_json() }  str(faker(\"images\", width = 300)) #> List of 4 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 3 #>   .. ..$ title      : chr \"Est sit et quas aut enim quo.\" #>   .. ..$ description: chr \"Est veritatis est quaerat iste. Alias qui deserunt tempora magnam nulla enim. Sed inventore a placeat iste nulla et.\" #>   .. ..$ url        : chr \"http://placeimg.com/300/480/any\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"wrapping-individual-endpoints","dir":"Articles","previous_headings":"Faker API","what":"Wrapping individual endpoints","title":"Wrapping APIs","text":"faker() quite general — ’s good tool package developer can read faker documentation translate function call. ’s friendly package user might know anything web APIs. typically next step process wrap individual endpoints functions. example, let’s take persons endpoint three additional parameters: gender (male female), birthday_start, birthday_end. simple wrapper start something like : make user friendly checking input types, returning result tibble. quick dirty conversion using purrr; depending needs use base R code tidyr::hoist(). next steps export document function; ’ll leave .","code":"faker_person <- function(gender = NULL, birthday_start = NULL, birthday_end = NULL, quantity = 1, locale = \"en_US\", seed = NULL) {   faker(     \"persons\",     gender = gender,     birthday_start = birthday_start,     birthday_end = birthday_end,     quantity = quantity,     locale = locale,     seed = seed   )   } str(faker_person(\"male\")) #> List of 4 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 9 #>   .. ..$ firstname: chr \"Enos\" #>   .. ..$ lastname : chr \"Hettinger\" #>   .. ..$ email    : chr \"dariana84@gmail.com\" #>   .. ..$ phone    : chr \"+6872790641073\" #>   .. ..$ birthday : chr \"1950-09-15\" #>   .. ..$ gender   : chr \"male\" #>   .. ..$ address  :List of 9 #>   .. .. ..$ street        : chr \"6358 Borer Mountain\" #>   .. .. ..$ streetName    : chr \"Marvin Radial\" #>   .. .. ..$ buildingNumber: chr \"56569\" #>   .. .. ..$ city          : chr \"Collierfort\" #>   .. .. ..$ zipcode       : chr \"93288-9153\" #>   .. .. ..$ country       : chr \"Bahrain\" #>   .. .. ..$ county_code   : chr \"MF\" #>   .. .. ..$ latitude      : num -87.6 #>   .. .. ..$ longitude     : num 109 #>   .. ..$ website  : chr \"http://roberts.biz\" #>   .. ..$ image    : chr \"http://placeimg.com/640/480/people\" library(purrr)  faker_person <- function(gender = NULL, birthday_start = NULL, birthday_end = NULL, quantity = 1, locale = \"en_US\", seed = NULL) {   if (!is.null(gender)) {     gender <- match.arg(gender, c(\"male\", \"female\"))   }   if (!is.null(birthday_start)) {     if (!inherits(birthday_start, \"Date\")) {       stop(\"`birthday_start` must be a date\")     }     birthday_start <- format(birthday_start, \"%Y-%m-%d\")   }   if (!is.null(birthday_end)) {     if (!inherits(birthday_end, \"Date\")) {       stop(\"`birthday_end` must be a date\")     }     birthday_end <- format(birthday_end, \"%Y-%m-%d\")   }      json <- faker(     \"persons\",     gender = gender,     birthday_start = birthday_start,     birthday_end = birthday_end,     quantity = quantity,     locale = locale,     seed = seed   )        tibble::tibble(     firstname = map_chr(json$data, \"firstname\"),     lastname = map_chr(json$data, \"lastname\"),     email = map_chr(json$data, \"email\"),     gender = map_chr(json$data, \"gender\")   ) } faker_person(\"male\", quantity = 5) #> # A tibble: 5 × 4 #>   firstname lastname  email                         gender #>   <chr>     <chr>     <chr>                         <chr>  #> 1 Gaston    Schumm    cayla.pfannerstill@blanda.com male   #> 2 Ole       Daugherty evalyn.aufderhar@yahoo.com    male   #> 3 Wilber    Skiles    ebotsford@feest.info          male   #> 4 Alf       Towne     lennie39@hickle.com           male   #> 5 Davion    Boehm     wilhelm38@yahoo.com           male"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"secret-management","dir":"Articles","previous_headings":"","what":"Secret management","title":"Wrapping APIs","text":"need take quick break APIs talk secrets. Secrets important, every API (except simnple APIs like faker) going require identify way, typically API key token. even expect users usually provide information, ’re still going need credentials order actually test package. system probably overkill one secret need share one two places. almost invariably accumulate secrets time, people computers need share , think spending little time understand system set package pay long term.","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"basics","dir":"Articles","previous_headings":"Secret management","what":"Basics","title":"Wrapping APIs","text":"httr2 provides secret_encrypt() secret_decrypt() scramble secrets can include public source code without worrying others can read . three basic steps process: create encryption key secret_make_key() used scramble descramble secrets using symmetric cryptography: (Note secret_make_key() uses cryptographically secure random number generator provided OpenSSL; affected R’s RNG settings, ’s way make reproducible.) scramble secrets secret_encrypt() store resulting text directly source code package: needed, descramble secret using secret_decrypt():","code":"key <- secret_make_key() key #> [1] \"2pdFpEkUeacJ3i_mIN0kgA\" secret_scrambled <- secret_encrypt(\"secret I need to work with an API\", key) secret_scrambled #> [1] \"LK79XkSV3347Y1hauiD_oaM0nLhEMrmqoBXQq7ecqTp7aMEJ1BD6HJ5uXx3bB03PSg\" secret_decrypt(secret_scrambled, key) #> [1] \"secret I need to work with an API\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"package-keys-and-secrets","dir":"Articles","previous_headings":"Secret management","what":"Package keys and secrets","title":"Wrapping APIs","text":"can create number encryption keys, highly recommend create one key per package, ’ll call package key. section, ’ll show store key (automated tests) can use , one else can. httr2 built around notion key live environment variable. first step make package key available local development machine adding line user-level .Renviron (can easily open usethis::edit_r_environ()): Now (restart R), ’ll able take advantage special secret_encrypt() secret_decrypt() feature: key argument can name environment variable, instead encryption key . fact, natural usage. ’ll also need make key available GitHub Actions (check pkgdown) automated tests can use . requires two steps: Add key repository secrets. Share key workflows need adding line appropriate workflow: can see httr2 GitHub workflow. continuous integration platforms offer similar ways make key available secure environment variable.","code":"YOURPACKAGE_KEY=key_you_generated_with_secret_make_key secret_scrambled <- secret_encrypt(\"secret I need to work with an API\", \"YOURPACKAGE_KEY\") secret_scrambled #> [1] \"Ku-sTsm7VbPt-5nmv7ww3eVKN6Z0vUC_Kbt2sORszGbPbYs-Pa--lzZhUY1c46sFnw\" secret_decrypt(secret_scrambled, \"YOURPACKAGE_KEY\") #> [1] \"secret I need to work with an API\" env:       YOURPACKAGE_KEY: ${{ secrets.YOURPACKAGE_KEY }}"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"when-the-package-key-isnt-available","dir":"Articles","previous_headings":"Secret management","what":"When the package key isn’t available","title":"Wrapping APIs","text":"important cases code won’t access package key: CRAN, personal machines external contributors, automated checks PRs. want share package CRAN make easy others contribute, need make sure examples, vignettes, tests work without error: vignettes, can run knitr::opts_chunk(eval = secret_has_key(\"YOURPACKAGE_KEY\")) chunks evaluated key available. examples, can surround code blocks require key (httr2::secret_has_key(\"YOURPACKAGE_KEY\")) {} don’t need anything tests secret_decrypt() run testhat, automatically skip() test key isn’t available.","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"nytimes-books-api","dir":"Articles","previous_headings":"","what":"NYTimes Books API","title":"Wrapping APIs","text":"Next ’ll take look NYTimes Books API. requires simple authentication API key ’s included every request. ’re wrapping API key ’re going face two struggles: test package without sharing key whole world? allow users supply key, without pass every function? now can understand following code works get NYTimes Book API key: ’ll start tackling first problem otherwise ’s way show API works vignette 😃. ’ll come back second end section, ’s easiest tackle function place.","code":"my_key <- secret_decrypt(\"4Nx84VPa83dMt3X6bv0fNBlLbv3U4D1kHM76YisKEfpCarBm1UHJHARwJHCFXQSV\", \"HTTR2_KEY\")"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"security-considerations","dir":"Articles","previous_headings":"NYTimes Books API","what":"Security considerations","title":"Wrapping APIs","text":"Note including API key query parameter relatively insecure; API uses method auth, ’s typically key relatively easy create gives relatively privileges. takes couple minutes generate NYTimes API key, ’s little incentive someone try steal . main problem conveying credentials via url ’s easily exposed, httr2 makes efforts redact confidential information stored query parameters. means ’s relatively easy leak key use req_perform(verbose = 1), req_dry_run(), even just print request object. indeed, ’ll see examples — bad practice real package, think ’s ok key doesn’t allow anything valuable makes teaching APIs much easier.","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"basic-request","dir":"Articles","previous_headings":"NYTimes Books API","what":"Basic request","title":"Wrapping APIs","text":"Now let’s perform test request look response: Like modern APIs, one returns results JSON: start wrapping function, let’s consider happens errors.","code":"resp <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = my_key, isbn = 9780307476463) %>%    req_perform() resp #> <httr2_response> #> GET #> https://api.nytimes.com/svc/books/v3/reviews.json?api-key=qZ4iJAGzcL5drrRDErhTvuRalSlZxut4&isbn=9780307476463 #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (1349 bytes) resp %>%    resp_body_json() %>%    str() #> List of 4 #>  $ status     : chr \"OK\" #>  $ copyright  : chr \"Copyright (c) 2021 The New York Times Company.  All Rights Reserved.\" #>  $ num_results: int 2 #>  $ results    :List of 2 #>   ..$ :List of 9 #>   .. ..$ url           : chr \"http://www.nytimes.com/2011/11/10/books/1q84-by-haruki-murakami-review.html\" #>   .. ..$ publication_dt: chr \"2011-11-10\" #>   .. ..$ byline        : chr \"JANET MASLIN\" #>   .. ..$ book_title    : chr \"1Q84\" #>   .. ..$ book_author   : chr \"Haruki Murakami\" #>   .. ..$ summary       : chr \"In “1Q84,” the Japanese novelist Haruki Murakami writes about characters in a Tokyo with two moons.\" #>   .. ..$ uuid          : chr \"00000000-0000-0000-0000-000000000000\" #>   .. ..$ uri           : chr \"nyt://book/00000000-0000-0000-0000-000000000000\" #>   .. ..$ isbn13        :List of 9 #>   .. .. ..$ : chr \"9780307476463\" #>   .. .. ..$ : chr \"9780307593313\" #>   .. .. ..$ : chr \"9780307957023\" #>   .. .. ..$ : chr \"9780345802934\" #>   .. .. ..$ : chr \"9781446484197\" #>   .. .. ..$ : chr \"9781446484203\" #>   .. .. ..$ : chr \"9781455830497\" #>   .. .. ..$ : chr \"9781469258843\" #>   .. .. ..$ : chr \"9788483832967\" #>   ..$ :List of 9 #>   .. ..$ url           : chr \"http://www.nytimes.com/2011/11/06/books/review/1q84-by-haruki-murakami-translated-by-jay-rubin-and-philip-gabri\"| __truncated__ #>   .. ..$ publication_dt: chr \"2011-11-06\" #>   .. ..$ byline        : chr \"KATHRYN SCHULZ\" #>   .. ..$ book_title    : chr \"1Q84\" #>   .. ..$ book_author   : chr \"Haruki Murakami\" #>   .. ..$ summary       : chr \"Haruki Murakami has translated Raymond Chandler into Japanese, and there’s a lot of Marlowe to his madness.\" #>   .. ..$ uuid          : chr \"00000000-0000-0000-0000-000000000000\" #>   .. ..$ uri           : chr \"nyt://book/00000000-0000-0000-0000-000000000000\" #>   .. ..$ isbn13        :List of 9 #>   .. .. ..$ : chr \"9780307476463\" #>   .. .. ..$ : chr \"9780307593313\" #>   .. .. ..$ : chr \"9780307957023\" #>   .. .. ..$ : chr \"9780345802934\" #>   .. .. ..$ : chr \"9781446484197\" #>   .. .. ..$ : chr \"9781446484203\" #>   .. .. ..$ : chr \"9781455830497\" #>   .. .. ..$ : chr \"9781469258843\" #>   .. .. ..$ : chr \"9788483832967\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"error-handling","dir":"Articles","previous_headings":"NYTimes Books API","what":"Error handling","title":"Wrapping APIs","text":"happens ’s error? example, deliberately supply invalid key: see ’s extra useful information can look last_response(): looks like ’s useful additional info faultstring: add information future errors can use body argument req_error(). function takes response returns character vector additional information include error. re-fetch request, see additional information displayed R error:","code":"resp <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) %>%    req_perform() #> Error: HTTP 401 Unauthorized. resp <- last_response() resp #> <httr2_response> #> GET #> https://api.nytimes.com/svc/books/v3/reviews.json?api-key=invalid&isbn=9780307476463 #> Status: 401 Unauthorized #> Content-Type: application/json #> Body: In memory (90 bytes) resp %>% resp_body_json() #> $fault #> $fault$faultstring #> [1] \"Invalid ApiKey\" #>  #> $fault$detail #> $fault$detail$errorcode #> [1] \"oauth.v2.InvalidApiKey\" resp %>% resp_body_json() %>% .$fault %>% .$faultstring #> [1] \"Invalid ApiKey\" nytimes_error_body <- function(resp) {   resp %>% resp_body_json() %>% .$fault %>% .$faultstring }  resp <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) %>%    req_error(body = nytimes_error_body) %>%    req_perform() #> Error: HTTP 401 Unauthorized. #> * Invalid ApiKey"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"rate-limits","dir":"Articles","previous_headings":"NYTimes Books API","what":"Rate limits","title":"Wrapping APIs","text":"Another common source errors rate-limiting — used many servers prevent one unruly client consuming many resources. frequently asked questions page describes rate limits NYT APIs: Yes, two rate limits per API: 4,000 requests per day 10 requests per minute. sleep 6 seconds calls avoid hitting per minute rate limit. need higher rate limit, please contact us code@nytimes.com. Many APIs return additional information long wait rate limit exceeded (often using Retry-header). deliberately violated rate limit quickly making 11 requests; unfortunately response standard 429 (many requests), include information long wait either response body headers. means can’t use req_retry(), automatically waits amount time server requests. Instead, ’ll use req_throttle() ensure don’t make 10 requests every 60 seconds: default, req_throttle() shares limit across requests made host (.e. api.nytimes.com). Since docs suggest rate limit applies per API, might want use realm argument bit specific:","code":"req <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) %>%    req_throttle(10 / 60) req <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) %>%    req_throttle(10 / 60, realm = \"https://api.nytimes.com/svc/books\")"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"wrapping-it-up","dir":"Articles","previous_headings":"NYTimes Books API","what":"Wrapping it up","title":"Wrapping APIs","text":"Putting together pieces yields function something like : finish real package, ’d want : Add explicit arguments check correct type. Export document function. Convert nested list user-friendly data structure (probably data frame one row per review). ’d also want provide convenient way user supply API key.","code":"nytimes_books <- function(api_key, path, ...) {   request(\"https://api.nytimes.com/svc/books/v3\") %>%      req_url_path_append(\"/reviews.json\") %>%      req_url_query(..., `api-key` = api_key) %>%      req_error(body = nytimes_error_body) %>%      req_throttle(10 / 60, realm = \"https://api.nytimes.com/svc/books\") %>%      req_perform() %>%      resp_body_json() }  drunk <- nytimes_books(my_key, \"/reviews.json\", isbn = \"0316453382\") drunk$results[[1]]$summary #> [1] \"In “Drunk,” Edward Slingerland plays devil’s advocate for the pleasure and utility of Dionysian abandon.\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"user-supplied-key","dir":"Articles","previous_headings":"NYTimes Books API","what":"User-supplied key","title":"Wrapping APIs","text":"good place start environment variable, environment variables easy set without typing anything console (can get accidentally shared via .Rhistory) easily set automated processes. ’d write function retrieve API key, returning helpful message ’s found: modify nytimes_books() use get_api_key() default value api_key. Since argument now optional, can move end argument list, since ’ll needed exceptional circumstances. can make approach little user friendly providing helper set’s environment variable: Using askpass (similar) good practice since don’t want encourage user type secret key console, mentioned . ’s good idea extend get_api_key() automatically use encrypted key make easier write tests:","code":"get_api_key <- function() {   key <- Sys.getenv(\"NYTIMES_KEY\")   if (identical(key, \"\")) {     stop(\"No API key found, please supply with `api_key` argument or with NYTIMES_KEY env var\")   }   key } nytimes_books <- function(path, ..., api_key = get_api_key()) {   ... } set_api_key <- function(key = NULL) {   if (is.null(key)) {     key <- askpass::askpass(\"Please enter your API key\")   }   Sys.setenv(\"NYTIMES_KEY\" = key) } get_api_key <- function() {   key <- Sys.getenv(\"NYTIMES_KEY\")   if (!identical(key, \"\")) {     return(key)   }      if (is_testing()) {     return(testing_key())   } else {     stop(\"No API key found, please supply with `api_key` argument or with NYTIMES_KEY env var\")    } }  is_testing <- function() {   identical(Sys.getenv(\"TESTTHAT\"), \"true\") }  testing_key <- function() {   secret_decrypt(\"4Nx84VPa83dMt3X6bv0fNBlLbv3U4D1kHM76YisKEfpCarBm1UHJHARwJHCFXQSV\", \"HTTR2_KEY\") }"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"github-gists-api","dir":"Articles","previous_headings":"","what":"Github Gists API","title":"Wrapping APIs","text":"Next ’ll take look API can make changes behalf user, just retrieve data: GitHub’s gist API. uses different HTTP methods perform different actions, like creating, updating, deleting gists. can get , let’s handle authentication, rate-limiting, errors.","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"authentication","dir":"Articles","previous_headings":"Github Gists API","what":"Authentication","title":"Wrapping APIs","text":"easiest way authenticate GitHub API use personal access token. token alternative username password. one username + password per site; can one token per use case. lets use case minimal set permissions, can easily revoke one token without affecting use case. created personal access token specifically vignette can access gists, , last example, stored encrypted version vignette: want run vignette , ’ll need create new token GitHub settings; just make sure includes “gist” scope. ’s also good idea give every token descriptive name, reminds motivating use case. authenticate request token, need put Authorization header “token” prefix: authorization header usually contains secret information, httr2 automatically redacts it1:","code":"token <- secret_decrypt(\"Guz59woxKoIO_JVtp2IzU3mFIU3ULtaUEa8xvvpYUBdVthR8jhxzc3bMZFhA9HL-ZK6YZudOI6g\", \"HTTR2_KEY\") req <- request(\"https://api.github.com/gists\") %>%    req_headers(Authorization = paste(\"token\", token))  req %>% req_perform() #> <httr2_response> #> GET https://api.github.com/gists #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (68160 bytes) req #> <httr2_request> #> GET https://api.github.com/gists #> Headers: #> • Authorization: '<REDACTED>' #> Body: empty req %>% req_dry_run() #> GET /gists HTTP/1.1 #> Host: api.github.com #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br #> Authorization: <REDACTED>"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"errors-1","dir":"Articles","previous_headings":"Github Gists API","what":"Errors","title":"Wrapping APIs","text":"’ve got authentication working, ’s always good idea work errors next, since help debug failed requests. experience APIs rarely good job documenting errors, ’ll often little experimentation. add pain, large APIs different endpoints often return different amounts information different forms. ’ll typically need tackle error handling iteratively, improving code time encounter new problem. GitHub document errors, ’m sufficiently distrustful still want construct deliberately malformed query see happens: documented get 422 “Unprocessable Entity” error. response rather different documentation suggests string message list errors: ’ll proceed anyway, writing function extracts data formats presentation user: Now can pass function body argument req_error() automatically included error request fails: Notice element character vector produced gh_error_body() becomes bullet resulting error.","code":"resp <- request(\"https://api.github.com/gists\") %>%    req_url_query(since = \"abcdef\") %>%    req_headers(Authorization = paste(\"token\", token)) %>%    req_perform() #> Error: HTTP 422 Unprocessable Entity. resp <- last_response() resp #> <httr2_response> #> GET https://api.github.com/gists?since=abcdef #> Status: 422 Unprocessable Entity #> Content-Type: application/json #> Body: In memory (156 bytes) resp %>% resp_body_json() #> $message #> [1] \"Invalid since parameter: 'abcdef'. Must be an ISO 8601 timestamp.\" #>  #> $documentation_url #> [1] \"https://docs.github.com/v3/gists/#parameters\" gist_error_body <- function(resp) {   body <- resp_body_json(resp)      message <- body$message   if (!is.null(body$documentation_url)) {     message <- c(message, paste0(\"See docs at <\", body$documentation_url, \">\"))   }   message } gist_error_body(resp) #> [1] \"Invalid since parameter: 'abcdef'. Must be an ISO 8601 timestamp.\" #> [2] \"See docs at <https://docs.github.com/v3/gists/#parameters>\" request(\"https://api.github.com/gists\") %>%    req_url_query(since = \"yesterday\") %>%    req_headers(Authorization = paste(\"token\", token)) %>%    req_error(body = gist_error_body) %>%    req_perform() #> Error: HTTP 422 Unprocessable Entity. #> * Invalid since parameter: 'yesterday'. Must be an ISO 8601 timestamp. #> * See docs at <https://docs.github.com/v3/gists/#parameters>"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"rate-limiting","dir":"Articles","previous_headings":"Github Gists API","what":"Rate-limiting","title":"Wrapping APIs","text":"’re thinking errors, ’s useful look happens requests rate limited. Luckily, GitHub consistently uses response headers provide information remaining rate limits. can teach httr2 can automatically wait reset rate limit hit. need define two functions. first tells us whether response transient error, .e. ’s worth waiting trying . GitHub, rate limit exceeded, response 403 status X-RateLimit-Remaining: 0 header: need function tells long wait. GitHub tells us rate limit resets (number seconds since 1970-01-01) X-RateLimit-Reset header. convert number seconds wait first convert number (since HTTP headers always strings), subtract current time (number seconds since 1970-01-01): pass functions req_retry() httr2 information needs handle rate-limiting automatically: also need supply either max_tries max_seconds order activate req_retry().","code":"resp <- req %>% req_perform()  resp %>% resp_headers(\"ratelimit\") #> <httr2_headers> #> x-ratelimit-limit: 5000 #> x-ratelimit-remaining: 4982 #> x-ratelimit-reset: 1632401606 #> x-ratelimit-used: 18 #> x-ratelimit-resource: core gist_is_transient <- function(resp) {   resp_status(resp) == 403 &&      resp_header(resp, \"X-RateLimit-Remaining\") == \"0\" } gist_is_transient(resp) #> [1] FALSE gist_after <- function(resp) {   time <- as.numeric(resp_header(resp, \"X-RateLimit-Reset\"))   time - unclass(Sys.time()) } gist_after(resp) #> [1] 1489.538 request(\"http://api.github.com\") %>%   req_retry(     is_transient = gist_is_transient,     after = gist_after,     max_seconds = 60   ) #> <httr2_request> #> GET http://api.github.com #> Body: empty #> Policies: #> • retry_max_wait: 60 #> • retry_is_transient: a function #> • retry_after: a function"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"wrapping-it-all-up","dir":"Articles","previous_headings":"Github Gists API","what":"Wrapping it all up","title":"Wrapping APIs","text":"Let’s wrap everything ’ve learned far single function creates request: ’ll use basis solve next challenge: uploading gist.","code":"req_gist <- function(token) {   request(\"https://api.github.com/gists\") %>%      req_headers(Authorization = paste(\"token\", token)) %>%      req_error(body = gist_error_body) %>%      req_retry(       is_transient = gist_is_transient,       after = gist_after     ) }  # Check it works: req_gist(token) %>%    req_perform() #> <httr2_response> #> GET https://api.github.com/gists #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (68160 bytes)"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"sending-data","dir":"Articles","previous_headings":"Github Gists API","what":"Sending data","title":"Wrapping APIs","text":"create gist need change method POST add body contains data encoded JSON. httr2 provides one function things: req_body_json(): Depending API ’re wrapping, might need send data different way. req_body_form() req_body_multipart() make easier encode data two common forms. API requires something different can use req_body_raw(). Typically, API return useful data resource ’ve just created. ’ll extract gist ID can use next examples, culminating deleting gist don’t end bunch duplicated gists 😃.","code":"req <- req_gist(token) %>%    req_body_json(list(     description = \"This is my cool gist!\",     files = list(test.R = list(content = \"print('Hi!')\")),     public = FALSE   )) req %>% req_dry_run() #> POST /gists HTTP/1.1 #> Host: api.github.com #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br #> Authorization: <REDACTED> #> Content-Type: application/json #> Content-Length: 100 #>  #> {\"description\":\"This is my cool gist!\",\"files\":{\"test.R\":{\"content\":\"print('Hi!')\"}},\"public\":false} resp <- req %>% req_perform() id <- resp %>% resp_body_json() %>% .$id id #> [1] \"52566ee6ff4220459ab2441ef8db4574\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"changing-a-gist","dir":"Articles","previous_headings":"Github Gists API","what":"Changing a gist","title":"Wrapping APIs","text":"Actually, description wasn’t true want change . , need send JSON encoded data, time need use PATCH verb. adding data request, use req_method() override default method:","code":"req <- req_gist(token) %>%    req_url_path_append(id) %>%    req_body_json(list(description = \"This is a lame gist\")) %>%    req_method(\"PATCH\") req %>% req_dry_run() #> PATCH /gists/52566ee6ff4220459ab2441ef8db4574 HTTP/1.1 #> Host: api.github.com #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br #> Authorization: <REDACTED> #> Content-Type: application/json #> Content-Length: 37 #>  #> {\"description\":\"This is a lame gist\"}"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"deleting-a-gist","dir":"Articles","previous_headings":"Github Gists API","what":"Deleting a gist","title":"Wrapping APIs","text":"Deleting gist similar, except don’t send data, just need adjust default method GET DELETE.","code":"req <- req_gist(token) %>%    req_url_path_append(id) %>%    req_method(\"DELETE\") req %>% req_dry_run() #> DELETE /gists/52566ee6ff4220459ab2441ef8db4574 HTTP/1.1 #> Host: api.github.com #> User-Agent: httr2/0.1.0 r-curl/4.3.2 libcurl/7.68.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br #> Authorization: <REDACTED> req %>% req_perform() #> <httr2_response> #> DELETE https://api.github.com/gists/52566ee6ff4220459ab2441ef8db4574 #> Status: 204 No Content"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"oauth","dir":"Articles","previous_headings":"","what":"OAuth","title":"Wrapping APIs","text":"API provides access website user already account (think Twitter, Instagram, Facebook, Google, GitHub, etc), ’s likely use OAuth allow authorise behalf user. OAuth2 authorisation framework ’s designed don’t share username password app; instead app asks permission use account. ’ve almost certainly used web; ’s used cases one website wants use another website behalf. OAuth broad framework ’s many many many different variants makes hard provide generalisable advice. following advice draws experience working number OAuth using APIs, don’t surprised need something slightly different API ’re working .","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"clients","dir":"Articles","previous_headings":"OAuth","what":"Clients","title":"Wrapping APIs","text":"first step working OAuth API create client. involves registering developer account API’s website creating new OAuth app. process varies API API, end ’ll get client id cases client secret. (’ll definitely need testing package, ’ll probably also baked package convenience users. Bundling app user friendly, always possible, particularly rate limits enforced per-app rather per-user basis. always provide way user provide app.) API provides way authenticate app without client secret, leave package. cases, ’ll need include secret package. can use obfuscate() hide secret; bulletproof3, cases ’ll easier create new client try steal . Additionally, ’s unusual OAuth client able anything right, even someone steal secret ’s much harm can . obfuscate secret, call obfuscate(): use client id website along obfuscated secret create client. following code shows GitHub OAuth app created specifically vignette: need figure token_url documentation. wish give good advice find 😞. Note print client secret automatically redacted:","code":"obfuscate(\"secret\") #> obfuscated(\"bA1-62JGEExf37Z0Psl6EBesOiIxUw\") client <- oauth_client(   id = \"28acfec0674bb3da9f38\",   secret = obfuscated(\"J9iiGmyelHltyxqrHXW41ZZPZamyUNxSX1_uKnvPeinhhxET_7FfUs2X0LLKotXY2bpgOMoHRCo\"),   token_url = \"https://github.com/login/oauth/access_token\",   name = \"hadley-oauth-test\" ) client #> <httr2_oauth_client> #>   name: hadley-oauth-test #>   id: 28acfec0674bb3da9f38 #>   secret: <REDACTED> #>   token_url: https://github.com/login/oauth/access_token #>   auth: oauth_client_req_auth_body"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"flows","dir":"Articles","previous_headings":"OAuth","what":"Flows","title":"Wrapping APIs","text":"client need use flow order get token. OAuth provides number different “flows”, common “authorisation code” flow, implemented req_oauth_auth_code(). can try running code: flow can’t used inside vignette ’s designed specifically interactive use: open webpage GitHub requires interactively confirm ’s OK app use GitHub account. flows provide different ways getting token: req_oauth_client_credentials() used allow client perform actions behalf (instead behalf user). typically need want support service accounts, used non-interactive environments. req_oauth_device() uses “device” flow designed devices like TVs don’t easy way enter data. also works well console. req_oauth_bearer_jwt() uses JWT signed private key. req_oauth_password() exchanges user name password access token. req_oauth_refresh() works directly refresh token already . ’s useful testing. ’s one historically important OAuth flow httr2 doesn’t support: implicit grant flow. now mostly deprecated never particularly good fit native applications relies technique returning access token works inside web browser. wrapping API, ’ll need carefully read documentation figure flows available. Typically ’ll want use auth code flow, ’s available ’ll need carefully consider others. additional wrinkle many APIs don’t implement flow exactly way spec. initial attempt doesn’t work, ’re going need sleuthing. going painful, unfortunately ’s way around . recommend using with_verbosity() can see exactly httr2 sending server. ’ll need carefully compare API documentation play “spot difference”.","code":"token <- oauth_flow_auth_code(client, auth_url = \"https://github.com/login/oauth/authorize\")"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"tokens","dir":"Articles","previous_headings":"OAuth","what":"Tokens","title":"Wrapping APIs","text":"point flow get token. can use req_auth_bearer_token() authorise request access token stored inside token object: However, cases won’t want , instead allow httr2 manage whole process, switching oauth_flow_{name} req_oauth_{name}: important APIs provide short-lived access token needs regularly refreshed using longer-lived refresh token. httr2 automatically refresh token expired (.e. expiry date past) request errors 401 ’s invalid_token error WWW-authenticate header.","code":"request(\"https://api.github.com/user\") %>%    req_auth_bearer_token(token$access_token) %>%    req_perform() %>%    resp_body_json() %>%   .$name #> [1] \"Hadley Wickham\" request(\"https://api.github.com/user\") %>%    req_oauth_auth_code(client, auth_url = \"https://github.com/login/oauth/authorize\") %>%    req_perform() %>%    resp_body_json()"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"caching","dir":"Articles","previous_headings":"OAuth","what":"Caching","title":"Wrapping APIs","text":"default, req_oauth_auth_code() friends cache token memory, multiple requests session use token. cases, may want save token ’s automatically used across sessions. easy (just set cache_disk = TRUE req_oauth_auth_code()) need carefully consider consequences saving user’s credentials disk. httr2 best can save credentials securely. stored local cache directory (rappdirs::user_cache_dir(\"httr2\")) accessible current user, encrypted hard package httr2 read. However, ’s way prevent R code using httr2 access , choose cache tokens, inform user give ability opt-. can see clients cached tokens looking cache directory used httr: httr2 automatically deletes cached tokens older 30 days whenever ’s loaded. means ’ll need re-auth least month, prevents tokens hanging around disk long ’ve forgotten created .","code":"dir(rappdirs::user_cache_dir(\"httr2\"), recursive = TRUE) #> character(0)"},{"path":"https://httr2.r-lib.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors","text":"Hadley Wickham. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://httr2.r-lib.org/index.html","id":"httr2","dir":"","previous_headings":"","what":"Perform HTTP Requests and Process the Responses","title":"Perform HTTP Requests and Process the Responses","text":"httr2 ground-rewrite httr provides pipeable API explicit request object solves problems felt packages wrap APIs (e.g. built-rate-limiting, retries, OAuth, secure secrets, ).","code":""},{"path":"https://httr2.r-lib.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Perform HTTP Requests and Process the Responses","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"r-lib/httr2\")"},{"path":"https://httr2.r-lib.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Perform HTTP Requests and Process the Responses","text":"use httr2, start creating request: can tailor request req_ family functions: see exactly httr2 send server req_dry_run(): Use req_perform() perform request, retrieving response: resp_ functions help extract various useful components response:","code":"library(httr2)  req <- request(\"https://r-project.org\") req #> <httr2_request> #> GET https://r-project.org #> Body: empty # Add custom headers req %>% req_headers(\"Accept\" = \"application/json\") #> <httr2_request> #> GET https://r-project.org #> Headers: #> • Accept: 'application/json' #> Body: empty  # Add a body, turning it into a POST req %>% req_body_json(list(x = 1, y = 2)) #> <httr2_request> #> POST https://r-project.org #> Body: json encoded data  # Automatically retry if the request fails req %>% req_retry(max_tries = 5) #> <httr2_request> #> GET https://r-project.org #> Body: empty #> Policies: #> • retry_max_tries: 5  # Change the HTTP method req %>% req_method(\"PATCH\") #> <httr2_request> #> PATCH https://r-project.org #> Body: empty req %>% req_dry_run() #> GET / HTTP/1.1 #> Host: r-project.org #> User-Agent: httr2/0.0.0.9000 r-curl/4.3.2 libcurl/7.64.1 #> Accept: */* #> Accept-Encoding: deflate, gzip resp <- req_perform(req) resp #> <httr2_response> #> GET https://www.r-project.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (6085 bytes) resp %>% resp_content_type() #> [1] \"text/html\" resp %>% resp_status_desc() #> [1] \"OK\" resp %>% resp_body_html() #> {html_document} #> <html lang=\"en\"> #> [1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ... #> [2] <body>\\n    <div class=\"container page\">\\n      <div class=\"row\">\\n       ..."},{"path":"https://httr2.r-lib.org/index.html","id":"major-differences-to-httr","dir":"","previous_headings":"","what":"Major differences to httr","title":"Perform HTTP Requests and Process the Responses","text":"can now create modify request without performing . means ’s now single function perform request fetch result: req_perform(). (want handle response streams , use req_stream() instead). req_perform() replaces httr::GET(), httr::POST(), httr::DELETE(), . HTTP errors automatically converted R errors. Use req_error() override defaults (turn 4xx 5xx responses errors) add additional details error message. can automatically retry request fails encounters transient HTTP error (e.g. 429 rate limit request). req_retry() defines maximum number retries, errors transient, long wait tries. OAuth support totally overhauled directly support many flows make much easier customise built-flows create . can manage secrets (often needed testing) secret_encrypt() friends. can obfuscate mildly confidential data obfuscate(), preventing scraped published code. can automatically cache cacheable results req_cache(). Relatively API responses cacheable, typically makes big difference.","code":""},{"path":"https://httr2.r-lib.org/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Perform HTTP Requests and Process the Responses","text":"httr2 wouldn’t possible without curl, openssl, jsonlite, jose, maintained Jeroen Ooms. big thanks also go Jenny Bryan Craig Citro given much useful feedback design internals user facing API.","code":""},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate curl syntax to httr2 — curl_translate","title":"Translate curl syntax to httr2 — curl_translate","text":"curl command line tool commonly demonstrate HTTP APIs can easily generated browser developer tools. curl_translate() saves pain manually translating calls implementing partial, frequently used, subset curl options. Use curl_help() see supported options, curl_translate() translate curl invocation copy pasted elsewhere. Inspired curlconverter written Bob Rudis.","code":""},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate curl syntax to httr2 — curl_translate","text":"","code":"curl_translate(cmd)  curl_help()"},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":"pkg-arg-cmd","dir":"Reference","previous_headings":"","what":"cmd (argument)","title":"Translate curl syntax to httr2 — curl_translate","text":"cmd Call curl. omitted clipr package installed, retrieved clipboard.","code":""},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate curl syntax to httr2 — curl_translate","text":"string containing translated httr2 code. input copied clipboard, translation copied back clipboard.","code":""},{"path":"https://httr2.r-lib.org/reference/httr2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","title":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","text":"Tools creating modifying HTTP requests,     performing processing results. 'httr2' modern     re-imagining 'httr' uses pipe-based interface solves     problems API wrapping packages face.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/httr2-package.html","id":"section-author","dir":"Reference","previous_headings":"","what":"Author","title":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","text":"Maintainer: Hadley Wickham hadley@rstudio.com contributors: RStudio [copyright holder, funder]","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and encode a JWT — jwt_claim","title":"Create and encode a JWT — jwt_claim","text":"jwt_claim() wrapper around jose::jwt_claim() creates JWT claim set extra default values. jwt_encode_sig() jwt_encode_hmac() thin wrappers around jose::jwt_encode_sig() jose::jwt_encode_hmac() exist primarily make specification functions little simpler.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and encode a JWT — jwt_claim","text":"","code":"jwt_claim(   iss = NULL,   sub = NULL,   aud = NULL,   exp = unix_time() + 5L * 60L,   nbf = unix_time(),   iat = unix_time(),   jti = NULL,   ... )  jwt_encode_sig(claim, key, size = 256, header = list())  jwt_encode_hmac(claim, secret, size = size, header = list())"},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-iss","dir":"Reference","previous_headings":"","what":"iss (argument)","title":"Create and encode a JWT — jwt_claim","text":"iss Issuer claim. Identifies principal issued JWT.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-sub","dir":"Reference","previous_headings":"","what":"sub (argument)","title":"Create and encode a JWT — jwt_claim","text":"sub Subject claim. Identifies principal subject JWT (.e. entity claims apply ).","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-aud","dir":"Reference","previous_headings":"","what":"aud (argument)","title":"Create and encode a JWT — jwt_claim","text":"aud Audience claim. Identifies recipients JWT intended. principle intended process JWT must identifid unique value.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-exp","dir":"Reference","previous_headings":"","what":"exp (argument)","title":"Create and encode a JWT — jwt_claim","text":"exp Expiration claim. Identifies expiration time JWT MUST accepted processing. Defaults 5 minutes.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-nbf","dir":"Reference","previous_headings":"","what":"nbf (argument)","title":"Create and encode a JWT — jwt_claim","text":"nbf claim. Identifies time JWT MUST accepted processing. Defaults current time.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-iat","dir":"Reference","previous_headings":"","what":"iat (argument)","title":"Create and encode a JWT — jwt_claim","text":"iat Issued claim. Identifies time JWT issued.  Defaults current time.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-jti","dir":"Reference","previous_headings":"","what":"jti (argument)","title":"Create and encode a JWT — jwt_claim","text":"jti JWT ID claim. Provides unique identifier JWT. omitted, uses random 32-byte sequence encoded base64url.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Create and encode a JWT — jwt_claim","text":"... additional claims include claim set.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-claim","dir":"Reference","previous_headings":"","what":"claim (argument)","title":"Create and encode a JWT — jwt_claim","text":"claim Claim set produced jwt_claim().","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-key","dir":"Reference","previous_headings":"","what":"key (argument)","title":"Create and encode a JWT — jwt_claim","text":"key RSA EC private key either specified path file, connection, string (PEM/SSH format), raw vector (DER format).","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-size","dir":"Reference","previous_headings":"","what":"size (argument)","title":"Create and encode a JWT — jwt_claim","text":"size Size, bits, sha2 signature, .e. 256, 384 512. HMAC/RSA, applicable ECDSA keys.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-header","dir":"Reference","previous_headings":"","what":"header (argument)","title":"Create and encode a JWT — jwt_claim","text":"header named list giving additional fields include JWT header.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"pkg-arg-secret","dir":"Reference","previous_headings":"","what":"secret (argument)","title":"Create and encode a JWT — jwt_claim","text":"secret String raw vector secret passphrase.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and encode a JWT — jwt_claim","text":"S3 list class jwt_claim.","code":""},{"path":"https://httr2.r-lib.org/reference/last_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve most recent request/response — last_response","title":"Retrieve most recent request/response — last_response","text":"functions retrieve recent request made httr2 response received, facilitate debugging problems occur. request succeed (requests made) last_response() NULL.","code":""},{"path":"https://httr2.r-lib.org/reference/last_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve most recent request/response — last_response","text":"","code":"last_response()  last_request()"},{"path":"https://httr2.r-lib.org/reference/last_response.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve most recent request/response — last_response","text":"HTTP response/request.","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform multiple requests in parallel — multi_req_perform","title":"Perform multiple requests in parallel — multi_req_perform","text":"variation req_perform() performs multiple requests parallel. Unlike req_perform() always succeeds; never throw error. Instead return error objects, responsibility handle. Exercise caution using function; easy pummel server many simultaneous requests. use hosts designed serve many files .","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform multiple requests in parallel — multi_req_perform","text":"","code":"multi_req_perform(reqs, paths = NULL, pool = NULL, cancel_on_error = FALSE)"},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"pkg-arg-reqs","dir":"Reference","previous_headings":"","what":"reqs (argument)","title":"Perform multiple requests in parallel — multi_req_perform","text":"reqs list requests.","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"pkg-arg-paths","dir":"Reference","previous_headings":"","what":"paths (argument)","title":"Perform multiple requests in parallel — multi_req_perform","text":"paths optional list paths, want download request bodies disks. supplied, must length reqs.","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"pkg-arg-pool","dir":"Reference","previous_headings":"","what":"pool (argument)","title":"Perform multiple requests in parallel — multi_req_perform","text":"pool Optionally, curl pool made curl::new_pool(). Supply want override defaults total concurrent connections (100) concurrent connections per host (6).","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"pkg-arg-cancel_on_error","dir":"Reference","previous_headings":"","what":"cancel_on_error (argument)","title":"Perform multiple requests in parallel — multi_req_perform","text":"cancel_on_error pending requests cancelled hit error. Set TRUE stop requests soon hit error. Responses never performed class httr2_cancelled result.","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform multiple requests in parallel — multi_req_perform","text":"list length reqs element either response error.","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"section-limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Perform multiple requests in parallel — multi_req_perform","text":"retrieve new OAuth token expires part way requests. perform throttling req_throttle(). attempt retries described req_retry(). Consults cache set req_cache() /requests. general, req_perform() might make multiple requests due retries OAuth failures, multi_req_perform() make make 1.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAuth client — oauth_client","title":"Create an OAuth client — oauth_client","text":"OAuth app combination client, set endpoints (.e. urls various requests sent), authentication mechanism. client consists least client_id, also often client_secret. get values create client API's website.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAuth client — oauth_client","text":"","code":"oauth_client(   id,   token_url,   secret = NULL,   key = NULL,   auth = c(\"body\", \"header\", \"jwt_sig\"),   auth_params = list(),   name = hash(id) )"},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"pkg-arg-id","dir":"Reference","previous_headings":"","what":"id (argument)","title":"Create an OAuth client — oauth_client","text":"id Client identifier.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"pkg-arg-token_url","dir":"Reference","previous_headings":"","what":"token_url (argument)","title":"Create an OAuth client — oauth_client","text":"token_url Url retrieve access token.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"pkg-arg-secret","dir":"Reference","previous_headings":"","what":"secret (argument)","title":"Create an OAuth client — oauth_client","text":"secret Client secret. apps, technically confidential principle avoid storing source code. However, many APIs require order provide user friendly authentication experience, risks including usually low. make things little safer, recommend using obfuscate() recorded client secret public code.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"pkg-arg-key","dir":"Reference","previous_headings":"","what":"key (argument)","title":"Create an OAuth client — oauth_client","text":"key Client key. alternative using secret, can instead supply confidential private key. never included package.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"pkg-arg-auth","dir":"Reference","previous_headings":"","what":"auth (argument)","title":"Create an OAuth client — oauth_client","text":"auth Authentication mechanism used client prove API. Can one three built-methods (\"body\", \"header\", \"jwt\"), function called arguments req, client, contents auth_params. common mechanism wild \"body\" client_id (optionally) client_secret added body. \"header\" sends client_id client_secret HTTP Authorization header. \"jwt_sig\" generate JWT, include client_assertion field body. See oauth_client_req_auth() details.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"pkg-arg-auth_params","dir":"Reference","previous_headings":"","what":"auth_params (argument)","title":"Create an OAuth client — oauth_client","text":"auth_params Additional parameters passed function specified auth.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"pkg-arg-name","dir":"Reference","previous_headings":"","what":"name (argument)","title":"Create an OAuth client — oauth_client","text":"name Optional name client. Used generating cache directory. NULL, generated hash client_id. defining package use package, recommend use package name.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an OAuth client — oauth_client","text":"OAuth client: S3 list class httr2_oauth_client.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth client authentication — oauth_client_req_auth","title":"OAuth client authentication — oauth_client_req_auth","text":"oauth_client_req_auth() authenticates request using authentication strategy defined auth auth_param arguments oauth_client(). used authenticate client part OAuth flow, authenticate request behalf user. three built-strategies: oauth_client_req_body() adds client id (optionally) secret request body, described rfc6749, Section 2.3.1. oauth_client_req_header() adds client id secret using HTTP basic authentication Authorization header, described rfc6749, Section 2.3.1. oauth_client_jwt_rs256() adds client assertion body using JWT signed jwt_sign_rs256() using private key, described rfc7523, Section 2.2. generally call functions directly instead specify auth argument oauth_client(). req client parameters automatically filled ; parameters come auth_params argument.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth client authentication — oauth_client_req_auth","text":"","code":"oauth_client_req_auth(req, client)  oauth_client_req_auth_header(req, client)  oauth_client_req_auth_body(req, client)  oauth_client_req_auth_jwt_sig(req, client, claim, size = 256, header = list())"},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"OAuth client authentication — oauth_client_req_auth","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth client authentication — oauth_client_req_auth","text":"client oauth_client.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"pkg-arg-claim","dir":"Reference","previous_headings":"","what":"claim (argument)","title":"OAuth client authentication — oauth_client_req_auth","text":"claim Claim set produced jwt_claim().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"pkg-arg-size","dir":"Reference","previous_headings":"","what":"size (argument)","title":"OAuth client authentication — oauth_client_req_auth","text":"size Size, bits, sha2 signature, .e. 256, 384 512. HMAC/RSA, applicable ECDSA keys.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"pkg-arg-header","dir":"Reference","previous_headings":"","what":"header (argument)","title":"OAuth client authentication — oauth_client_req_auth","text":"header named list giving additional fields include JWT header.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth client authentication — oauth_client_req_auth","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: authorization code — oauth_flow_auth_code","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"functions implement OAuth authorization code flow, defined rfc6749, Section 4.1. commonly used OAuth flow user opens page browser, approves access, returns R. oauth_flow_auth_code() high-level wrapper work APIs adhere relatively closely spec. remaining low-level functions can used assemble custom flow APIs spec: oauth_flow_auth_code_url() generates url user sent. oauth_flow_auth_code_listen() starts webserver listens response resource server. oauth_flow_auth_code_parse() parses query parameters returned server redirect, verifying state correct, returning authorisation code. oauth_flow_auth_code_pkce() generates code verifier, method, challenge components needed PKCE, defined rfc7636.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"","code":"oauth_flow_auth_code(   client,   auth_url,   scope = NULL,   pkce = TRUE,   auth_params = list(),   token_params = list(),   host_name = \"localhost\",   host_ip = \"127.0.0.1\",   port = httpuv::randomPort() )  oauth_flow_auth_code_url(   client,   auth_url,   redirect_uri = NULL,   scope = NULL,   state = NULL,   auth_params = list() )  oauth_flow_auth_code_listen(host_ip = \"127.0.0.1\", port = 1410)  oauth_flow_auth_code_parse(query, state)  oauth_flow_auth_code_pkce()"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-auth_url","dir":"Reference","previous_headings":"","what":"auth_url (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"auth_url Authorization url; need discover reading documentation.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-pkce","dir":"Reference","previous_headings":"","what":"pkce (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"pkce Use \"Proof Key Code Exchange\"? adds extra layer security always used supported server.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-auth_params","dir":"Reference","previous_headings":"","what":"auth_params (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"auth_params List containing additional parameters passed oauth_flow_auth_code_url()","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-host_name","dir":"Reference","previous_headings":"","what":"host_name (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"host_name Host name used generate redirect_uri","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-host_ip","dir":"Reference","previous_headings":"","what":"host_ip (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"host_ip IP address web server bound .","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-port","dir":"Reference","previous_headings":"","what":"port (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"port Port bind web server . default, uses random port. may need set fixed port API requires redirect_uri specified client exactly matches redirect_uri generated function.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-redirect_uri","dir":"Reference","previous_headings":"","what":"redirect_uri (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"redirect_uri URL user redirected.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-state","dir":"Reference","previous_headings":"","what":"state (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"state Random state generated oauth_flow_auth_code(). Used verify working authentication request created. (unlikely threat R packages since webserver listens authorization responses transient.)","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"pkg-arg-query","dir":"Reference","previous_headings":"","what":"query (argument)","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"query List query parameters returned oauth_flow_auth_code_listen().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"function uses Bearer JWT authorization grant get access token, defined rfc7523, Section 2.1. often used service accounts, accounts used primarily automated environments.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"","code":"oauth_flow_bearer_jwt(   client,   claim,   signature = \"jwt_encode_sig\",   signature_params = list(),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"pkg-arg-claim","dir":"Reference","previous_headings":"","what":"claim (argument)","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"claim list claims. elements claim set static apart iat, nbf, exp, jti, provide list jwt_claim() automatically fill dynamic components. components need vary, can instead provide zero-argument callback function call jwt_claim().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"pkg-arg-signature","dir":"Reference","previous_headings":"","what":"signature (argument)","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"signature Function use sign claim, e.g. jwt_encode_sig().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"pkg-arg-signature_params","dir":"Reference","previous_headings":"","what":"signature_params (argument)","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"signature_params Additional arguments passed signature, e.g. size, header.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: client credentials — oauth_flow_client_credentials","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"function implements OAuth client credentials flow, defined rfc6749, Section 4.4. used allow client access resources controls directly, behalf user.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"","code":"oauth_flow_client_credentials(client, scope = NULL, token_params = list())"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: device — oauth_flow_device","title":"OAuth flow: device — oauth_flow_device","text":"functions implement OAuth device flow, defined rfc8628. designed devices access web browser (ever authenticated app TV, probably flow used), also works well within R.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: device — oauth_flow_device","text":"","code":"oauth_flow_device(   client,   auth_url,   scope = NULL,   auth_params = list(),   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth flow: device — oauth_flow_device","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"pkg-arg-auth_url","dir":"Reference","previous_headings":"","what":"auth_url (argument)","title":"OAuth flow: device — oauth_flow_device","text":"auth_url Authorization url; need discover reading documentation.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth flow: device — oauth_flow_device","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"pkg-arg-auth_params","dir":"Reference","previous_headings":"","what":"auth_params (argument)","title":"OAuth flow: device — oauth_flow_device","text":"auth_params List containing additional parameters passed oauth_flow_auth_code_url()","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth flow: device — oauth_flow_device","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: device — oauth_flow_device","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: user password — oauth_flow_password","title":"OAuth flow: user password — oauth_flow_password","text":"function implements OAuth resource owner password flow, defined rfc6749, Section 4.3. allows user supply password , exchanging access token can cached locally.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: user password — oauth_flow_password","text":"","code":"oauth_flow_password(   client,   username,   password = NULL,   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth flow: user password — oauth_flow_password","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"pkg-arg-username","dir":"Reference","previous_headings":"","what":"username (argument)","title":"OAuth flow: user password — oauth_flow_password","text":"username User name.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"pkg-arg-password","dir":"Reference","previous_headings":"","what":"password (argument)","title":"OAuth flow: user password — oauth_flow_password","text":"password Password. avoid entering password directly calling function captured .Rhistory. Instead, leave unset default behaviour prompt interactively.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth flow: user password — oauth_flow_password","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth flow: user password — oauth_flow_password","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: user password — oauth_flow_password","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: refresh token — oauth_flow_refresh","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"function generates access token refresh token, following process described rfc6749, Section 6. Errors refresh returns new refresh token, see req_oauth_refresh() details.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"","code":"oauth_flow_refresh(   client,   refresh_token = Sys.getenv(\"HTTR_REFRESH_TOKEN\"),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"pkg-arg-refresh_token","dir":"Reference","previous_headings":"","what":"refresh_token (argument)","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"refresh_token refresh token. equivalent password typed console stored script. Instead, recommend placing environment variable; default behaviour look HTTR_REFRESH_TOKEN.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAuth token — oauth_token","title":"Create an OAuth token — oauth_token","text":"Creates S3 object class <httr2_token> representing OAuth token returned access token endpoint.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAuth token — oauth_token","text":"","code":"oauth_token(   access_token,   token_type = \"bearer\",   expires_in = NULL,   refresh_token = NULL,   ...,   .date = Sys.time() )"},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"pkg-arg-access_token","dir":"Reference","previous_headings":"","what":"access_token (argument)","title":"Create an OAuth token — oauth_token","text":"access_token access token used authenticate request","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"pkg-arg-token_type","dir":"Reference","previous_headings":"","what":"token_type (argument)","title":"Create an OAuth token — oauth_token","text":"token_type Type token; \"bearer\" currently supported.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"pkg-arg-expires_in","dir":"Reference","previous_headings":"","what":"expires_in (argument)","title":"Create an OAuth token — oauth_token","text":"expires_in Number seconds token expires.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"pkg-arg-refresh_token","dir":"Reference","previous_headings":"","what":"refresh_token (argument)","title":"Create an OAuth token — oauth_token","text":"refresh_token Optional refresh token; supplied, can used cheaply get new access token one expires.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Create an OAuth token — oauth_token","text":"... Additional components returned endpoint","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"pkg-arg-.date","dir":"Reference","previous_headings":"","what":".date (argument)","title":"Create an OAuth token — oauth_token","text":".date Date request made; used convert relative expires_in absolute expires_at.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an OAuth token — oauth_token","text":"OAuth token: S3 list class httr2_token.","code":""},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":null,"dir":"Reference","previous_headings":"","what":"Obfuscate mildly secret information — obfuscate","title":"Obfuscate mildly secret information — obfuscate","text":"pair functions provides way obfuscate mildly confidential information, like OAuth client secrets. secret can revealed source code, good R programmer still figure little effort. main goal protect scraping; way automated tool grab obfuscated secrets. un-obfuscation happens last possible instant, obfuscated() works limited locations: secret argument oauth_client() Elements data argument req_body_form(), req_body_json(), req_body_multipart().","code":""},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obfuscate mildly secret information — obfuscate","text":"","code":"obfuscate(x)  obfuscated(x)"},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Obfuscate mildly secret information — obfuscate","text":"x string obfuscate, mark obfuscated.","code":""},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Obfuscate mildly secret information — obfuscate","text":"obfuscate() prints obfuscated() call include code. obfuscated() returns S3 class marking string obfuscated can unobfuscated needed.","code":""},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":"pkg-arg-lhs","dir":"Reference","previous_headings":"","what":"lhs (argument)","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder.","code":""},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":"pkg-arg-rhs","dir":"Reference","previous_headings":"","what":"rhs (argument)","title":"Pipe operator — %>%","text":"rhs function call using magrittr semantics.","code":""},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate request with HTTP basic authentication — req_auth_basic","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"sets Authorization header. See details https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"","code":"req_auth_basic(req, username, password = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"pkg-arg-username","dir":"Reference","previous_headings":"","what":"username (argument)","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"username User name.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"pkg-arg-password","dir":"Reference","previous_headings":"","what":"password (argument)","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"password Password. avoid entering password directly calling function captured .Rhistory. Instead, leave unset default behaviour prompt interactively.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate request with bearer token — req_auth_bearer_token","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"bearer token gives bearer access confidential resources (keep secure like user name password). usually produced large authentication scheme (like various OAuth 2.0 flows), sometimes given directly.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"","code":"req_auth_bearer_token(req, token)"},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":"pkg-arg-token","dir":"Reference","previous_headings":"","what":"token (argument)","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"token bearer token","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Send data in request body — req_body","title":"Send data in request body — req_body","text":"req_body_file() sends local file. req_body_raw() sends string raw vector. req_body_json() sends JSON encoded data. req_body_form() sends form encoded data. req_body_multipart() creates multi-part body. Adding body request automatically switch method POST.","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send data in request body — req_body","text":"","code":"req_body_raw(req, body, type = NULL)  req_body_file(req, path, type = NULL)  req_body_json(req, data, auto_unbox = TRUE, digits = 22, null = \"null\", ...)  req_body_form(req, data)  req_body_multipart(req, data)"},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Send data in request body — req_body","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-body","dir":"Reference","previous_headings":"","what":"body (argument)","title":"Send data in request body — req_body","text":"body literal string raw vector send body.","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-type","dir":"Reference","previous_headings":"","what":"type (argument)","title":"Send data in request body — req_body","text":"type Content type. req_body_file(), default attempt guess extension path.","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-path","dir":"Reference","previous_headings":"","what":"path (argument)","title":"Send data in request body — req_body","text":"path Path file upload.","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-data","dir":"Reference","previous_headings":"","what":"data (argument)","title":"Send data in request body — req_body","text":"data Data include body. req_body_json() can R data structure can serialised JSON, req_body_form() named list simple values, req_body_multipart() named list containing strings objects produced curl::form_file()/curl::form_data().","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-auto_unbox","dir":"Reference","previous_headings":"","what":"auto_unbox (argument)","title":"Send data in request body — req_body","text":"auto_unbox length-1 vectors automatically \"unboxed\" JSON scalars?","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-digits","dir":"Reference","previous_headings":"","what":"digits (argument)","title":"Send data in request body — req_body","text":"digits many digits precision numbers use JSON?","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-null","dir":"Reference","previous_headings":"","what":"null (argument)","title":"Send data in request body — req_body","text":"null NULL translated JSON's null (\"null\") empty list (\"list\").","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Send data in request body — req_body","text":"... arguments passed jsonlite::toJSON().","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Send data in request body — req_body","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically cache requests — req_cache","title":"Automatically cache requests — req_cache","text":"Use req_perform() automatically cache HTTP requests. API requests cacheable, static files often . req_cache() caches responses GET requests status code 200 least one standard caching headers (e.g. Expires, Etag, Last-Modified, Cache-Control), unless caching expressly prohibited Cache-Control: -store. Typically, request still sent server check cached value still --date, need re-download body value. learn HTTP caching, recommend MDN article HTTP caching.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically cache requests — req_cache","text":"","code":"req_cache(req, path, use_on_error = FALSE, debug = FALSE)"},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Automatically cache requests — req_cache","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"pkg-arg-path","dir":"Reference","previous_headings":"","what":"path (argument)","title":"Automatically cache requests — req_cache","text":"path Path cache directory","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"pkg-arg-use_on_error","dir":"Reference","previous_headings":"","what":"use_on_error (argument)","title":"Automatically cache requests — req_cache","text":"use_on_error request errors, cache response, req_perform() return instead generating error?","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"pkg-arg-debug","dir":"Reference","previous_headings":"","what":"debug (argument)","title":"Automatically cache requests — req_cache","text":"debug TRUE emit useful messages telling cache hits misses. can helpful understand whether caching actually anything use case.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically cache requests — req_cache","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a dry run — req_dry_run","title":"Perform a dry run — req_dry_run","text":"shows exactly httr2 send server, without actually sending anything. requires httpuv package works sending real HTTP request local webserver, thanks magic curl::curl_echo().","code":""},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a dry run — req_dry_run","text":"","code":"req_dry_run(req, quiet = FALSE, redact_headers = TRUE)"},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Perform a dry run — req_dry_run","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"pkg-arg-quiet","dir":"Reference","previous_headings":"","what":"quiet (argument)","title":"Perform a dry run — req_dry_run","text":"quiet TRUE print anything.","code":""},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"pkg-arg-redact_headers","dir":"Reference","previous_headings":"","what":"redact_headers (argument)","title":"Perform a dry run — req_dry_run","text":"redact_headers Redact confidential data headers? Currently redacts contents Authorization header prevent accidentally leaking credentials debugging/reprexing.","code":""},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a dry run — req_dry_run","text":"Invisibly, list containing information request, including method, path, headers.","code":""},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Control handling of HTTP errors — req_error","title":"Control handling of HTTP errors — req_error","text":"req_perform() automatically convert HTTP errors (.e. 4xx 5xx status code) R errors. Use req_perform() either override defaults, extract additional information response useful expose user.","code":""},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control handling of HTTP errors — req_error","text":"","code":"req_error(req, is_error = NULL, body = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Control handling of HTTP errors — req_error","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"pkg-arg-is_error","dir":"Reference","previous_headings":"","what":"is_error (argument)","title":"Control handling of HTTP errors — req_error","text":"is_error predicate function takes single argument (response) returns TRUE FALSE indicating whether R error signalled.","code":""},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"pkg-arg-body","dir":"Reference","previous_headings":"","what":"body (argument)","title":"Control handling of HTTP errors — req_error","text":"body callback function takes single argument (response) returns character vector additional information include body error. vector passed along message argument rlang::abort() can use formatting supports.","code":""},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Control handling of HTTP errors — req_error","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify request headers — req_headers","title":"Modify request headers — req_headers","text":"req_headers() allows set value header.","code":""},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify request headers — req_headers","text":"","code":"req_headers(.req, ...)"},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":"pkg-arg-.req","dir":"Reference","previous_headings":"","what":".req (argument)","title":"Modify request headers — req_headers","text":".req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Modify request headers — req_headers","text":"... Name-value pairs headers values.Use NULL reset value httr's default Use \"\" remove header Use character vector repeat header.","code":""},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify request headers — req_headers","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Set HTTP method in request — req_method","title":"Set HTTP method in request — req_method","text":"Use function use custom HTTP method like \"HEAD\", \"DELETE\", \"PATCH\", \"UPDATE\", \"OPTIONS\".","code":""},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set HTTP method in request — req_method","text":"","code":"req_method(req, method)"},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Set HTTP method in request — req_method","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":"pkg-arg-method","dir":"Reference","previous_headings":"","what":"method (argument)","title":"Set HTTP method in request — req_method","text":"method Custom HTTP method","code":""},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Set HTTP method in request — req_method","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication — req_oauth","title":"OAuth authentication — req_oauth","text":"low-level helper automatically authenticating request OAuth flow, caching access token refreshing possible. need use function implementing OAuth flow.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication — req_oauth","text":"","code":"req_oauth(req, flow, flow_params, cache)"},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"OAuth authentication — req_oauth","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"pkg-arg-flow","dir":"Reference","previous_headings":"","what":"flow (argument)","title":"OAuth authentication — req_oauth","text":"flow Function used generate access token.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"pkg-arg-flow_params","dir":"Reference","previous_headings":"","what":"flow_params (argument)","title":"OAuth authentication — req_oauth","text":"flow_params List parameters call flow .","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"pkg-arg-cache","dir":"Reference","previous_headings":"","what":"cache (argument)","title":"OAuth authentication — req_oauth","text":"cache object controls token cached. list containing three functions:get() retrieves token cache, returning NULL cached yet. set() saves token cache. clear() removes token cache","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication — req_oauth","text":"oauth_token.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with authorization code — req_oauth_auth_code","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"uses oauth_flow_auth_code() generate access token, used authentication request req_auth_bearer_token(). token automatically cached (either memory disk) minimise number times flow performed.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"","code":"req_oauth_auth_code(   req,   client,   auth_url,   cache_disk = FALSE,   cache_key = NULL,   scope = NULL,   pkce = TRUE,   auth_params = list(),   token_params = list(),   host_name = \"localhost\",   host_ip = \"127.0.0.1\",   port = httpuv::randomPort() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-auth_url","dir":"Reference","previous_headings":"","what":"auth_url (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"auth_url Authorization url; need discover reading documentation.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-cache_disk","dir":"Reference","previous_headings":"","what":"cache_disk (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Cached tokens encrypted automatically deleted 30 days creation.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-cache_key","dir":"Reference","previous_headings":"","what":"cache_key (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"cache_key want cache multiple tokens per app, use key disambiguate .","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-pkce","dir":"Reference","previous_headings":"","what":"pkce (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"pkce Use \"Proof Key Code Exchange\"? adds extra layer security always used supported server.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-auth_params","dir":"Reference","previous_headings":"","what":"auth_params (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"auth_params List containing additional parameters passed oauth_flow_auth_code_url()","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-host_name","dir":"Reference","previous_headings":"","what":"host_name (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"host_name Host name used generate redirect_uri","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-host_ip","dir":"Reference","previous_headings":"","what":"host_ip (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"host_ip IP address web server bound .","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"pkg-arg-port","dir":"Reference","previous_headings":"","what":"port (argument)","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"port Port bind web server . default, uses random port. may need set fixed port API requires redirect_uri specified client exactly matches redirect_uri generated function.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"section-security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"authorization code flow used web applications native applications (equivalent R packages). rfc8252 spells important considerations native apps. importantly way native apps keep secrets users. means server either require client_secret (.e. public client confidential client) ensure possession client_secret bestow meaningful rights. modern APIs bigger players (Azure, Google, etc) explicitly native apps. However, cases, even older APIs, possessing client_secret gives ability anything harmful, general principle fine include R package, long mildly obfuscated protect credential scraping. incentive steal client credentials takes less time create new client find client secret.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"uses oauth_flow_bearer_jwt() generate access token used authenticate request req_auth_bearer_token(). token cached memory.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"","code":"req_oauth_bearer_jwt(   req,   client,   claim,   signature = \"jwt_encode_sig\",   signature_params = list(),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"pkg-arg-claim","dir":"Reference","previous_headings":"","what":"claim (argument)","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"claim list claims. elements claim set static apart iat, nbf, exp, jti, provide list jwt_claim() automatically fill dynamic components. components need vary, can instead provide zero-argument callback function call jwt_claim().","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"pkg-arg-signature","dir":"Reference","previous_headings":"","what":"signature (argument)","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"signature Function use sign claim, e.g. jwt_encode_sig().","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"pkg-arg-signature_params","dir":"Reference","previous_headings":"","what":"signature_params (argument)","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"signature_params Additional arguments passed signature, e.g. size, header.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with client credentials — req_oauth_client_credentials","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"uses oauth_flow_client_credentials() generate access token, used authentication request req_auth_bearer_token(). token cached memory.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"","code":"req_oauth_client_credentials(req, client, scope = NULL, token_params = list())"},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with device flow — req_oauth_device","title":"OAuth authentication with device flow — req_oauth_device","text":"uses oauth_flow_device() generate access token, used authentication request req_auth_bearer_token(). token automatically cached (either memory disk) minimise number times flow performed.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with device flow — req_oauth_device","text":"","code":"req_oauth_device(   req,   client,   cache_disk = FALSE,   cache_key = NULL,   scope = NULL,   auth_params = list(),   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"OAuth authentication with device flow — req_oauth_device","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth authentication with device flow — req_oauth_device","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"pkg-arg-cache_disk","dir":"Reference","previous_headings":"","what":"cache_disk (argument)","title":"OAuth authentication with device flow — req_oauth_device","text":"cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Cached tokens encrypted automatically deleted 30 days creation.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"pkg-arg-cache_key","dir":"Reference","previous_headings":"","what":"cache_key (argument)","title":"OAuth authentication with device flow — req_oauth_device","text":"cache_key want cache multiple tokens per app, use key disambiguate .","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth authentication with device flow — req_oauth_device","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"pkg-arg-auth_params","dir":"Reference","previous_headings":"","what":"auth_params (argument)","title":"OAuth authentication with device flow — req_oauth_device","text":"auth_params List containing additional parameters passed oauth_flow_auth_code_url()","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth authentication with device flow — req_oauth_device","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with device flow — req_oauth_device","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with username and password — req_oauth_password","title":"OAuth authentication with username and password — req_oauth_password","text":"uses oauth_flow_password() generate access token, used authentication request req_auth_bearer_token(). token, password automatically cached (either memory disk); password used get token discarded.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with username and password — req_oauth_password","text":"","code":"req_oauth_password(   req,   client,   username,   password = NULL,   cache_disk = FALSE,   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"OAuth authentication with username and password — req_oauth_password","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth authentication with username and password — req_oauth_password","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"pkg-arg-username","dir":"Reference","previous_headings":"","what":"username (argument)","title":"OAuth authentication with username and password — req_oauth_password","text":"username User name.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"pkg-arg-password","dir":"Reference","previous_headings":"","what":"password (argument)","title":"OAuth authentication with username and password — req_oauth_password","text":"password Password. avoid entering password directly calling function captured .Rhistory. Instead, leave unset default behaviour prompt interactively.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"pkg-arg-cache_disk","dir":"Reference","previous_headings":"","what":"cache_disk (argument)","title":"OAuth authentication with username and password — req_oauth_password","text":"cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Cached tokens encrypted automatically deleted 30 days creation.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth authentication with username and password — req_oauth_password","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth authentication with username and password — req_oauth_password","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with username and password — req_oauth_password","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with a refresh token — req_oauth_refresh","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"uses oauth_flow_refresh() generate access token, used authentication request req_auth_bearer_token(). primarily useful testing: can manually execute another OAuth flow (e.g. calling oauth_flow_auth_code() oauth_flow_device()), extract refresh token result, save environment variable future use automated tests. requesting access token, server may also return new refresh token. happens, oauth_flow_refresh() error, create new refresh token following procedure get first token (good idea document first time might need ).","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"","code":"req_oauth_refresh(   req,   client,   refresh_token = Sys.getenv(\"HTTR_REFRESH_TOKEN\"),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"pkg-arg-client","dir":"Reference","previous_headings":"","what":"client (argument)","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"client oauth_client().","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"pkg-arg-refresh_token","dir":"Reference","previous_headings":"","what":"refresh_token (argument)","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"refresh_token refresh token. equivalent password typed console stored script. Instead, recommend placing environment variable; default behaviour look HTTR_REFRESH_TOKEN.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"pkg-arg-scope","dir":"Reference","previous_headings":"","what":"scope (argument)","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"scope Scopes requested resource owner.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"pkg-arg-token_params","dir":"Reference","previous_headings":"","what":"token_params (argument)","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set arbitrary curl options in request — req_options","title":"Set arbitrary curl options in request — req_options","text":"req_options() expert use ; allows directly set libcurl options access features otherwise available httr2.","code":""},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set arbitrary curl options in request — req_options","text":"","code":"req_options(.req, ...)"},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":"pkg-arg-.req","dir":"Reference","previous_headings":"","what":".req (argument)","title":"Set arbitrary curl options in request — req_options","text":".req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Set arbitrary curl options in request — req_options","text":"... Name-value pairs. name valid curl option, found curl::curl_options().","code":""},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Set arbitrary curl options in request — req_options","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a request — req_perform","title":"Perform a request — req_perform","text":"preparing request, call req_perform() perform , fetching results back R response.","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a request — req_perform","text":"","code":"req_perform(   req,   path = NULL,   verbosity = getOption(\"httr2_verbosity\", 0L),   mock = getOption(\"httr2_mock\", NULL) )"},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Perform a request — req_perform","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"pkg-arg-path","dir":"Reference","previous_headings":"","what":"path (argument)","title":"Perform a request — req_perform","text":"path Optionally, path save body request. useful large responses since avoids storing response memory.","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"pkg-arg-verbosity","dir":"Reference","previous_headings":"","what":"verbosity (argument)","title":"Perform a request — req_perform","text":"verbosity much information print? wrapper around req_verbose() uses integer control verbosity:0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages.","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"pkg-arg-mock","dir":"Reference","previous_headings":"","what":"mock (argument)","title":"Perform a request — req_perform","text":"mock mocking function. supplied, function called request. return either NULL (want handle request) response (). See with_mock()/ local_mock() details.","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a request — req_perform","text":"request successful (.e. request successfully performed response HTTP status code <400 recieved), HTTP response; otherwise throws error. Override behaviour req_error().","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"section-requests","dir":"Reference","previous_headings":"","what":"Requests","title":"Perform a request — req_perform","text":"Note one call req_perform() may perform multiple HTTP requests: url redirected 301, 302, 303, 307, curl automatically follow Location header new location. configured retries req_retry() request fails transient problem, req_perform() try waiting bit. See req_retry() details. using OAuth, cached token expired, req_perform() get new token either using refresh token (available) running OAuth flow.","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Control when a request will retry, and how long it will wait between tries — req_retry","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"req_retry() alters req_perform() automatically retry case failure. activate , must specify either total number requests make max_tries total amount time spend max_seconds. req_perform() retry : either HTTP request HTTP response complete successfully leading error curl, lower-level library httr uses perform HTTP request. occurs, example, wifi . error \"transient\", .e. HTTP error can resolved waiting. default, 429 503 statuses treated transient, API wrapping transient status codes (conveys transient-ness property response), can override default is_transient. bad idea immediately retry request, req_perform() wait little trying : response contains Retry-header, httr2 wait amount time specifies. API wrapping conveys information different header (property response) can override default behaviour retry_after. Otherwise, httr2 use \"truncated exponential backoff full jitter\", .e. wait random amount time one second 2 ^ tries seconds, capped 60 seconds. words, waits runif(1, 1, 2) seconds first failure, runif(1, 1, 4) second, runif(1, 1, 8) third, . prefer different strategy, can override default backoff.","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"","code":"req_retry(   req,   max_tries = NULL,   max_seconds = NULL,   is_transient = NULL,   backoff = NULL,   after = NULL )"},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"pkg-arg-max_tries, max_seconds","dir":"Reference","previous_headings":"","what":"max_tries, max_seconds (argument)","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"max_tries, max_seconds Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), req_perform() retry.","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"pkg-arg-is_transient","dir":"Reference","previous_headings":"","what":"is_transient (argument)","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"is_transient predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error.","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"pkg-arg-backoff","dir":"Reference","previous_headings":"","what":"backoff (argument)","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"backoff function takes single argument (number failed attempts far) returns number seconds wait.","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"pkg-arg-after","dir":"Reference","previous_headings":"","what":"after (argument)","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead..","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a request, streaming data back to R — req_stream","title":"Perform a request, streaming data back to R — req_stream","text":"preparing request, call req_stream() perform request handle result streaming callback. useful streaming HTTP APIs potentially stream never ends.","code":""},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a request, streaming data back to R — req_stream","text":"","code":"req_stream(req, callback, timeout_sec = Inf, buffer_kb = 64)"},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Perform a request, streaming data back to R — req_stream","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"pkg-arg-callback","dir":"Reference","previous_headings":"","what":"callback (argument)","title":"Perform a request, streaming data back to R — req_stream","text":"callback single argument callback function. called repeatedly raw vector whenever least buffer_kb worth data process. must return TRUE continue streaming.","code":""},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"pkg-arg-timeout_sec","dir":"Reference","previous_headings":"","what":"timeout_sec (argument)","title":"Perform a request, streaming data back to R — req_stream","text":"timeout_sec Number seconds processs stream .","code":""},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"pkg-arg-buffer_kb","dir":"Reference","previous_headings":"","what":"buffer_kb (argument)","title":"Perform a request, streaming data back to R — req_stream","text":"buffer_kb Buffer size, kilobytes.","code":""},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a request, streaming data back to R — req_stream","text":"HTTP response.","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Set request method/path from a template — req_template","title":"Set request method/path from a template — req_template","text":"Many APIs document methods lightweight template mechanism looks like GET /user/{user} POST /organisation/:org. function makes easy copy paste snippets retrieve template variables either function arguments current environment:","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set request method/path from a template — req_template","text":"","code":"req_template(req, template, ..., .env = parent.frame())"},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Set request method/path from a template — req_template","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"pkg-arg-template","dir":"Reference","previous_headings":"","what":"template (argument)","title":"Set request method/path from a template — req_template","text":"template template string consists optional HTTP method path containing variables labelled like either :foo {foo}.","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Set request method/path from a template — req_template","text":"... Template variables.","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"pkg-arg-.env","dir":"Reference","previous_headings":"","what":".env (argument)","title":"Set request method/path from a template — req_template","text":".env Environment look template variables found .... Expert use .","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Set request method/path from a template — req_template","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":null,"dir":"Reference","previous_headings":"","what":"Throttle a request by automatically adding a delay — req_throttle","title":"Throttle a request by automatically adding a delay — req_throttle","text":"Use req_throttle() ensure repeated calls req_perform() never exceed specified rate.","code":""},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throttle a request by automatically adding a delay — req_throttle","text":"","code":"req_throttle(req, rate, realm = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Throttle a request by automatically adding a delay — req_throttle","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"pkg-arg-rate","dir":"Reference","previous_headings":"","what":"rate (argument)","title":"Throttle a request by automatically adding a delay — req_throttle","text":"rate Maximum rate, .e. maximum number requests per second. Usually easiest expressed fraction, number_of_requests / number_of_seconds, e.g. 15 requests per minute 15 / 60.","code":""},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"pkg-arg-realm","dir":"Reference","previous_headings":"","what":"realm (argument)","title":"Throttle a request by automatically adding a delay — req_throttle","text":"realm unique identifier throttle pool. supplied, defaults hostname request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Throttle a request by automatically adding a delay — req_throttle","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Set time limit for a request — req_timeout","title":"Set time limit for a request — req_timeout","text":"error thrown request complete time limit.","code":""},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set time limit for a request — req_timeout","text":"","code":"req_timeout(req, seconds)"},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Set time limit for a request — req_timeout","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":"pkg-arg-seconds","dir":"Reference","previous_headings":"","what":"seconds (argument)","title":"Set time limit for a request — req_timeout","text":"seconds Maximum number seconds wait","code":""},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Set time limit for a request — req_timeout","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify request URL — req_url","title":"Modify request URL — req_url","text":"req_url() replaces entire url req_url_query() modifies components query req_url_path() modifies path req_url_path_append() adds path","code":""},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify request URL — req_url","text":"","code":"req_url(req, url)  req_url_query(req, ...)  req_url_path(req, ...)  req_url_path_append(req, ...)"},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Modify request URL — req_url","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"pkg-arg-url","dir":"Reference","previous_headings":"","what":"url (argument)","title":"Modify request URL — req_url","text":"url New URL; completely replaces existing.","code":""},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Modify request URL — req_url","text":"... req_url_query(): Name-value pairs provide query parameters. value must either length-1 atomic vector NULL (automatically dropped). req_url_path() req_url_path_append(): sequence path components combined /.","code":""},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify request URL — req_url","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Set user-agent for a request — req_user_agent","title":"Set user-agent for a request — req_user_agent","text":"overrides default user-agent set httr2 includes version numbers httr2, curl package, libcurl.","code":""},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set user-agent for a request — req_user_agent","text":"","code":"req_user_agent(req, string = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Set user-agent for a request — req_user_agent","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":"pkg-arg-string","dir":"Reference","previous_headings":"","what":"string (argument)","title":"Set user-agent for a request — req_user_agent","text":"string String sent User-Agent header. NULL, user default.","code":""},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Set user-agent for a request — req_user_agent","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Show extra output when request is performed — req_verbose","title":"Show extra output when request is performed — req_verbose","text":"req_verbose() uses following prefixes distinguish different components HTTP requests responses: *  informative curl messages <- request headers << request body -> response headers >> response body","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show extra output when request is performed — req_verbose","text":"","code":"req_verbose(   req,   header_req = TRUE,   header_resp = TRUE,   body_req = FALSE,   body_resp = FALSE,   info = FALSE,   redact_headers = TRUE )"},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"pkg-arg-req","dir":"Reference","previous_headings":"","what":"req (argument)","title":"Show extra output when request is performed — req_verbose","text":"req request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"pkg-arg-header_req, header_resp","dir":"Reference","previous_headings":"","what":"header_req, header_resp (argument)","title":"Show extra output when request is performed — req_verbose","text":"header_req, header_resp Show request/response headers?","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"pkg-arg-body_req, body_resp","dir":"Reference","previous_headings":"","what":"body_req, body_resp (argument)","title":"Show extra output when request is performed — req_verbose","text":"body_req, body_resp request/response bodies? response body compressed, show number bytes received \"chunk\".","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"pkg-arg-info","dir":"Reference","previous_headings":"","what":"info (argument)","title":"Show extra output when request is performed — req_verbose","text":"info Show informational text curl? mainly useful debugging https auth problems, disabled default.","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"pkg-arg-redact_headers","dir":"Reference","previous_headings":"","what":"redact_headers (argument)","title":"Show extra output when request is performed — req_verbose","text":"redact_headers Redact confidential data headers? Currently redacts contents Authorization header prevent accidentally leaking credentials debugging/reprexing.","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Show extra output when request is performed — req_verbose","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/request.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new HTTP request — request","title":"Create a new HTTP request — request","text":"perform HTTP request, first create request object request(), define behaviour req_ functions, perform request fetch response req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new HTTP request — request","text":"","code":"request(base_url)"},{"path":"https://httr2.r-lib.org/reference/request.html","id":"pkg-arg-base_url","dir":"Reference","previous_headings":"","what":"base_url (argument)","title":"Create a new HTTP request — request","text":"base_url Base URL request.","code":""},{"path":"https://httr2.r-lib.org/reference/request.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new HTTP request — request","text":"HTTP response: S3 list class httr2_request.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract body from response — resp_body_raw","title":"Extract body from response — resp_body_raw","text":"resp_body_raw() returns raw bytes. resp_body_string() returns UTF-8 string. resp_body_json() returns parsed JSON. resp_body_html() returns parsed HTML. resp_body_xml() returns parsed XML. resp_body_json() resp_body_xml() check content-type header correct; server returns incorrect type can suppress check check_type = FALSE.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract body from response — resp_body_raw","text":"","code":"resp_body_raw(resp)  resp_body_string(resp, encoding = NULL)  resp_body_json(resp, check_type = TRUE, simplifyVector = FALSE, ...)  resp_body_html(resp, check_type = TRUE, ...)  resp_body_xml(resp, check_type = TRUE, ...)"},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"pkg-arg-resp","dir":"Reference","previous_headings":"","what":"resp (argument)","title":"Extract body from response — resp_body_raw","text":"resp response object.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"pkg-arg-encoding","dir":"Reference","previous_headings":"","what":"encoding (argument)","title":"Extract body from response — resp_body_raw","text":"encoding Character encoding body text. specified, use encoding specified content-type, falling back UTF-8 warning found. resulting string always re-encoded UTF-8.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"pkg-arg-check_type","dir":"Reference","previous_headings":"","what":"check_type (argument)","title":"Extract body from response — resp_body_raw","text":"check_type Check response expected content type? Set FALSE suppress automated check","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"pkg-arg-simplifyVector","dir":"Reference","previous_headings":"","what":"simplifyVector (argument)","title":"Extract body from response — resp_body_raw","text":"simplifyVector JSON arrays containing primitives (.e. booleans, numbers, strings) caused atomic vectors?","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Extract body from response — resp_body_raw","text":"... argumented passed jsonlite::fromJSON() xml2::read_xml() respectively.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract body from response — resp_body_raw","text":"resp_body_raw() returns raw vector. resp_body_string() returns string. resp_body_json() returns NULL, atomic vector, list. resp_body_html() resp_body_xml() return xml2::xml_document","code":""},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract response content type and encoding — resp_content_type","title":"Extract response content type and encoding — resp_content_type","text":"resp_content_type() returns just type subtype Content-Type header. Content-Type provided; returns NA. Used resp_body_json(), resp_body_html(), resp_body_xml(). resp_encoding() returns likely character encoding text types, parsed charset parameter Content-Type header. header found, valid, charset parameter found, returns UTF-8. Used resp_body_string().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract response content type and encoding — resp_content_type","text":"","code":"resp_content_type(resp)  resp_encoding(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":"pkg-arg-resp","dir":"Reference","previous_headings":"","what":"resp (argument)","title":"Extract response content type and encoding — resp_content_type","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract response content type and encoding — resp_content_type","text":"string. content type specified resp_content_type() return character NA; encoding specified, resp_encoding() return \"UTF-8\".","code":""},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract request date from response — resp_date","title":"Extract request date from response — resp_date","text":"responses contain request date Date header; provided server automatically added httr2.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract request date from response — resp_date","text":"","code":"resp_date(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":"pkg-arg-resp","dir":"Reference","previous_headings":"","what":"resp (argument)","title":"Extract request date from response — resp_date","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract request date from response — resp_date","text":"POSIXct date-time.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract headers from a response — resp_headers","title":"Extract headers from a response — resp_headers","text":"resp_headers() retrieves list headers. resp_header() retrieves single header. resp_header_exists() checks header present.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract headers from a response — resp_headers","text":"","code":"resp_headers(resp, filter = NULL)  resp_header(resp, header)  resp_header_exists(resp, header)"},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"pkg-arg-resp","dir":"Reference","previous_headings":"","what":"resp (argument)","title":"Extract headers from a response — resp_headers","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"pkg-arg-filter","dir":"Reference","previous_headings":"","what":"filter (argument)","title":"Extract headers from a response — resp_headers","text":"filter regular expression used filter header names. NULL, default, returns headers.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"pkg-arg-header","dir":"Reference","previous_headings":"","what":"header (argument)","title":"Extract headers from a response — resp_headers","text":"header Header name (case insensitive)","code":""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract headers from a response — resp_headers","text":"resp_headers() returns list. resp_header() returns string header exists NULL otherwise. resp_header_exists() returns TRUE FALSE.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse link URL from a response — resp_link_url","title":"Parse link URL from a response — resp_link_url","text":"Parses URLs Link header defined rfc8288.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse link URL from a response — resp_link_url","text":"","code":"resp_link_url(resp, rel)"},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":"pkg-arg-resp","dir":"Reference","previous_headings":"","what":"resp (argument)","title":"Parse link URL from a response — resp_link_url","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":"pkg-arg-rel","dir":"Reference","previous_headings":"","what":"rel (argument)","title":"Parse link URL from a response — resp_link_url","text":"rel \"link relation type\" value retrieve URL.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse link URL from a response — resp_link_url","text":"Either string providing URL, specified rel exists, NULL .","code":""},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the raw response — resp_raw","title":"Show the raw response — resp_raw","text":"function reconstructs HTTP message httr2 received server. unlikely exactly byte--byte identical (servers compress least body, HTTP/2 can also compress headers), conveys information.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the raw response — resp_raw","text":"","code":"resp_raw(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":"pkg-arg-resp","dir":"Reference","previous_headings":"","what":"resp (argument)","title":"Show the raw response — resp_raw","text":"resp HTTP response","code":""},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the raw response — resp_raw","text":"resp (invisibly).","code":""},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract wait time from a response — resp_retry_after","title":"Extract wait time from a response — resp_retry_after","text":"Computes many seconds wait retrying request inspecting Retry-header. parses forms (absolute relative) returns number seconds wait. heading found, return NA.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract wait time from a response — resp_retry_after","text":"","code":"resp_retry_after(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":"pkg-arg-resp","dir":"Reference","previous_headings":"","what":"resp (argument)","title":"Extract wait time from a response — resp_retry_after","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract wait time from a response — resp_retry_after","text":"Scalar double giving number seconds wait retrying request.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract HTTP status from response — resp_status","title":"Extract HTTP status from response — resp_status","text":"resp_status() retrieves numeric HTTP status code resp_status_desc() retrieves brief textual description. resp_is_error() returns TRUE status code represents error (.e. 4xx 5xx status). resp_check_status() turns HTTPs errors R errors. functions mostly internal use cases ever see 200 response: 1xx handled internally curl. 3xx redirects automatically followed. see deliberately suppressed redirects req %>% req_options(followlocation = FALSE). 4xx client 5xx server errors automatically turned R errors. can stop turned R errors req_error(), e.g. req %>% req_error(is_error = ~ FALSE).","code":""},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract HTTP status from response — resp_status","text":"","code":"resp_status(resp)  resp_status_desc(resp)  resp_is_error(resp)  resp_check_status(resp, info = NULL)"},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":"pkg-arg-resp","dir":"Reference","previous_headings":"","what":"resp (argument)","title":"Extract HTTP status from response — resp_status","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":"pkg-arg-info","dir":"Reference","previous_headings":"","what":"info (argument)","title":"Extract HTTP status from response — resp_status","text":"info character vector additional information include error message. Passed rlang::abort().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract HTTP status from response — resp_status","text":"resp_status() returns scalar integer resp_status_desc() returns string resp_is_error() returns TRUE FALSE resp_check_status() invisibly returns response ok; otherwise throws error class httr2_http_{status}.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new HTTP response — response","title":"Create a new HTTP response — response","text":"Generally, need call function directly; get real HTTP response calling req_perform() friends. function provided primarily testing, place describe key components response.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new HTTP response — response","text":"","code":"response(   status_code = 200,   url = \"https://example.com\",   method = \"GET\",   headers = list(),   body = NULL )"},{"path":"https://httr2.r-lib.org/reference/response.html","id":"pkg-arg-status_code","dir":"Reference","previous_headings":"","what":"status_code (argument)","title":"Create a new HTTP response — response","text":"status_code HTTP status code. Must single integer.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"pkg-arg-url","dir":"Reference","previous_headings":"","what":"url (argument)","title":"Create a new HTTP response — response","text":"url URL response came ; might URL request redirects.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"pkg-arg-method","dir":"Reference","previous_headings":"","what":"method (argument)","title":"Create a new HTTP response — response","text":"method HTTP method used retrieve response.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"pkg-arg-headers","dir":"Reference","previous_headings":"","what":"headers (argument)","title":"Create a new HTTP response — response","text":"headers HTTP headers. Can supplied raw character vector parsed using standard rules, named list.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"pkg-arg-body","dir":"Reference","previous_headings":"","what":"body (argument)","title":"Create a new HTTP response — response","text":"body Response, , contained response body.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new HTTP response — response","text":"HTTP response: S3 list class httr2_response.","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":null,"dir":"Reference","previous_headings":"","what":"Secret management — secrets","title":"Secret management — secrets","text":"httr2 provides handful functions designed working confidential data. useful testing packages use httr2 often requires confidential data needs available testing, available package users. secret_encrypt() secret_decrypt() work individual strings secret_write_rds() secret_read_rds() work .rds files secret_make_key() generates random string use key. secret_has_key() returns TRUE key available; can use examples vignettes want evaluate CI, CRAN/package users. look key environment variable. used inside testthat, automatically testthat::skip() test env var found. (Outside testthat, error env var found.)","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Secret management — secrets","text":"","code":"secret_make_key()  secret_encrypt(x, key)  secret_decrypt(encrypted, key)  secret_write_rds(x, path, key)  secret_read_rds(path, key)  secret_has_key(key)"},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Secret management — secrets","text":"x Object encrypt. Must string secret_encrypt().","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"pkg-arg-key","dir":"Reference","previous_headings":"","what":"key (argument)","title":"Secret management — secrets","text":"key Encryption key; password allows \"lock\" \"unlock\" secret. easiest way specify name environment variable. Alternatively, already base64url encoded string, can wrap (), can pass raw vector directly.","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"pkg-arg-encrypted","dir":"Reference","previous_headings":"","what":"encrypted (argument)","title":"Secret management — secrets","text":"encrypted String decrypt","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"pkg-arg-path","dir":"Reference","previous_headings":"","what":"path (argument)","title":"Secret management — secrets","text":"path Path .rds file","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Secret management — secrets","text":"secret_decrypt() secret_encrypt() return strings. secret_write_rds() returns x invisibly; secret_read_rds() returns saved object. secret_make_key() returns string class AsIs. secret_has_key() returns TRUE FALSE.","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"section-basic-workflow","dir":"Reference","previous_headings":"","what":"Basic workflow","title":"Secret management — secrets","text":"Use secret_make_key() generate password. Make available env var (e.g. {MYPACKAGE}_KEY) adding line .Renviron. Encrypt strings secret_encrypt() data secret_write_rds(), setting key = \"{MYPACKAGE}_KEY\". tests, decrypt data secret_decrypt() secret_read_rds() match encrypt . push code CI server, already \"work\" functions automatically skip tests {MYPACKAGE}_KEY} env var set. make tests actually run, need set env var using whatever tool CI system provides setting env vars. Make sure carefully inspect test output check skips actually gone away.","code":""},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and build URLs — url_parse","title":"Parse and build URLs — url_parse","text":"url_parse() parses URL component pieces; url_build() reverse, converting list pieces string URL. See rfc3986 details parsing algorithm.","code":""},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and build URLs — url_parse","text":"","code":"url_parse(url)  url_build(url)"},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":"pkg-arg-url","dir":"Reference","previous_headings":"","what":"url (argument)","title":"Parse and build URLs — url_parse","text":"url url_parse() string parse URL; url_build() URL turn back string.","code":""},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and build URLs — url_parse","text":"url_build() returns string. url_parse() returns URL: S3 list class httr2_url elements scheme, hostname, port, path, fragment, query, username, password.","code":""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily mock requests — with_mock","title":"Temporarily mock requests — with_mock","text":"Mocking allows selectively temporarily replace response typically receive request code. primarily used testing.","code":""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily mock requests — with_mock","text":"","code":"with_mock(mock, code)  local_mock(mock, env = caller_env())"},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"pkg-arg-mock","dir":"Reference","previous_headings":"","what":"mock (argument)","title":"Temporarily mock requests — with_mock","text":"mock single argument function called request object. return either NULL (want handle request) response ().","code":""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"pkg-arg-code","dir":"Reference","previous_headings":"","what":"code (argument)","title":"Temporarily mock requests — with_mock","text":"code Code execute temporary environment.","code":""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"pkg-arg-env","dir":"Reference","previous_headings":"","what":"env (argument)","title":"Temporarily mock requests — with_mock","text":"env Environment use scoping changes.","code":""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily mock requests — with_mock","text":"with_mock() returns result evaluating code.","code":""},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily set verbosity for all requests — with_verbosity","title":"Temporarily set verbosity for all requests — with_verbosity","text":"with_verbose() useful debugging httr2 code buried deep inside another package allows see exactly sent requested.","code":""},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily set verbosity for all requests — with_verbosity","text":"","code":"with_verbosity(code, verbosity = 1)"},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":"pkg-arg-code","dir":"Reference","previous_headings":"","what":"code (argument)","title":"Temporarily set verbosity for all requests — with_verbosity","text":"code Code execture","code":""},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":"pkg-arg-verbosity","dir":"Reference","previous_headings":"","what":"verbosity (argument)","title":"Temporarily set verbosity for all requests — with_verbosity","text":"verbosity much information print? wrapper around req_verbose() uses integer control verbosity:0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages.","code":""},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily set verbosity for all requests — with_verbosity","text":"result evaluating code.","code":""}]
